«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»

«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

«/*
  *
  * Alow domain connections to have more than one participant
  *
  */»
«AROUND canCreate FOR gmfgen::GenLink»
	«IF getUniqueIdentifier().startsWith('ConnectionParticipant_')»
		«EXPAND xpt::Common::generatedMemberComment»
		public boolean canCreate«getUniqueIdentifier()»(«EXPAND canCreateParameters FOR modelFacet») {
						//left out contains check to have multiple participants to the same clabject.
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor editor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) org.eclipse.ui.PlatformUI
			.getWorkbench().getActiveWorkbenchWindow().getActivePage()
			.getActiveEditor();
			
			if (editor.getPalette().getActiveTool().getId().startsWith("dsl.")) {
				
				de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation[] targetInstantiations = new de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation[] {};
				de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation[] sourceInstantiations = new de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation[] {};
				
				org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL
						.newInstance();
				org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl
						.createOCLHelper();
				helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.LML_MODEL);
	
				de.uni_mannheim.informatik.swt.models.plm.PLM.Connection typeConnection = null;
				
				try {
					org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("Instantiation.allInstances()->select(i | i.instance = self)");
					sourceInstantiations = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation>) ocl
							.evaluate(source, q))
							.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation[] {});
					
					//We can only apply a DSL tool to something that is an instance
					if(sourceInstantiations.length == 0)
						return false;
					
					typeConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)sourceInstantiations[0].getType();
					
					if (typeConnection.getName().equals(editor.getPalette().getActiveTool().getLabel()))
					{
						if (target == null)
							return true;
					}
					else
					{
						return false;
					}
					
					q = helper
							.createQuery("Instantiation.allInstances()->select(i | i.instance = self)");
					targetInstantiations = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation>) ocl
							.evaluate(target, q))
							.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation[] {});
					
				} catch (org.eclipse.ocl.ParserException e) {
					e.printStackTrace();
				}
			
				//We cannot connect an instance of an connection to a clabject which is 
				//not an instance of a type
				if (targetInstantiations.length == 0)
					return false;

				String typeName = editor.getPalette().getActiveTool()
						.getLabel();
				de.uni_mannheim.informatik.swt.models.plm.PLM.Model instanceModel = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model) source.eContainer();
				de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology) instanceModel.eContainer();

				//We cannot use dsl tools on the highest level
				if (!(ont.getContent().indexOf(instanceModel) > 0))
					return false;

				de.uni_mannheim.informatik.swt.models.plm.PLM.Model typeModel = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model) ont.getContent().get(
						ont.getContent().indexOf(instanceModel) - 1);

				//check if it is in the types
				return (typeConnection.getParticipant().indexOf(
						targetInstantiations[0].getType()) > -1)
						&& canExist«getUniqueIdentifier()»(«EXPAND canCreateValues FOR modelFacet»);
			}
			
			return canExist«getUniqueIdentifier()»(«EXPAND canCreateValues FOR modelFacet»);
		}
	«ELSE»
		«targetDef.proceed()»
	«ENDIF»
«ENDAROUND»

// FIXME mark as private (_) and move to impl::<find proper place>::LinkConstraints.xpt
«DEFINE canCreateParameters FOR gmfgen::LinkModelFacet»«EXPAND sourceTargetParameters»«ENDDEFINE»// source and target are reasonable defaults
«DEFINE canCreateParameters FOR gmfgen::TypeLinkModelFacet»«IF hasContainerOtherThanSource(self)»«EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» container, «ENDIF»«EXPAND sourceTargetParameters»«ENDDEFINE»

«DEFINE sourceTargetParameters FOR gmfgen::LinkModelFacet»«EXPAND MetaModel::QualifiedClassName FOR getSourceType()» source, «EXPAND MetaModel::QualifiedClassName FOR getTargetType()» target«ENDDEFINE»

// these are in fact 'canExist' values
«DEFINE canCreateValues FOR gmfgen::LinkModelFacet»source, target«ENDDEFINE» // defaults
«DEFINE canCreateValues FOR gmfgen::TypeLinkModelFacet»«IF hasContainerOtherThanSource(self)»container, «ENDIF»null, source, target«ENDDEFINE»