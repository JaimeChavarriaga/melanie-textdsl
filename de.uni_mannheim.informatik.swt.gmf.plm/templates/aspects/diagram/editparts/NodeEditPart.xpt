«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

//**************************************************************
//ADDITIONS
//handle notifictaion is overriden later in this transformation
//**************************************************************
«AROUND additions FOR gmfgen::GenNode»
//Gives the option to diplay a DomainConnection/Generalization/Specialization as black rectangle
«IF self.editPartClassName = 'DomainConnectionEditPart' 
	or self.editPartClassName = 'BinaryGeneralizationEditPart' 
	or self.editPartClassName = 'MultipleSpecializationEditPart'
	or self.editPartClassName = 'MultipleGeneralizationEditPart'»
	
	«EXPAND getToggleValue-»
	«EXPAND toggle-»
	«EXPAND addNotifyForToggeling-»
	«EXPAND setExpressedVisualStateForConnections-»
«ENDIF»
//Responsible for the multiplicity, role, navigation ends and elision
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND updateConnections-»
	«EXPAND refreshSourceConnections-»
	«EXPAND doElideForDomainConnectionEditPart-»
«ENDIF»
«IF self.editPartClassName = 'DomainEntityEditPart'
		or self.editPartClassName = 'RendererEditPart'»
	«EXPAND elideDomainEntity-»
	«EXPAND setExpressedVisualStateForDomainEntity-»
«ENDIF»
«ENDAROUND»

//**************************************************************
//HANDLE NOTIFICATION
//**************************************************************
«AROUND handleNotificationEvent FOR gmfgen::GenNode-»
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND handleNotificationEventForDomainConnection-»
«ELSEIF self.editPartClassName = 'FieldEditPart'
			or self.editPartClassName = 'Field2EditPart'
			or self.editPartClassName = 'Field3EditPart'»
	«EXPAND handleNotificationEventForField-»
«ELSEIF self.editPartClassName = 'MethodEditPart'
			or self.editPartClassName = 'Method2EditPart'»
	«EXPAND handleNotificationEventForMethod-»
«ELSEIF self.editPartClassName = 'ModelEditPart'»
	«EXPAND handleNotificationEventForModel-»
«ELSEIF self.editPartClassName = 'OntologyEnditPart'»
	«EXPAND handleNotificationEventForOntology»
«ELSEIF self.editPartClassName = 'DomainEntityEditPart'
			or self.editPartClassName = 'RendererEditPart'»
	«EXPAND handleNotificationEventForDomainEntityEditPart»
«ELSEIF self.editPartClassName = 'BinaryGeneralizationEditPart' 
	or self.editPartClassName = 'MultipleSpecializationEditPart'
	or self.editPartClassName = 'MultipleGeneralizationEditPart'»
	«EXPAND handleNotificationEventForInheritance-»
«ENDIF»
«ENDAROUND»

//**************************************************************
//DEFINITIONS
//**************************************************************
«DEFINE updateConnections FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private void updateConnections() {
		if (this.sourceConnections == null)
			return;

		java.util.List<DomainConnectionParticipantEditPart> sourceConnections = this.sourceConnections;
		de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection domainConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) org.eclipse.gmf.runtime.diagram.core.util.ViewUtil
				.resolveSemanticElement(this.getPrimaryView());

		//needs to be used as source connections can have non participant connections
		int numberNonParticipantConnection = 0;

		for (int i = 0; i < sourceConnections.size(); i++) {

			//Take care that no renderer link is used here
			if (! (sourceConnections.get(i) instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart))
			{
				numberNonParticipantConnection++;
				continue;
			}

			//****************************************************************************
			//Set navigable
			//****************************************************************************
			if (domainConnection.getIsNavigable().size() > i  - numberNonParticipantConnection
					&& domainConnection.getIsNavigable().get(i  - numberNonParticipantConnection) == true) {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(new org.eclipse.draw2d.PolylineDecoration());
			} else {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(null);
			}

			//****************************************************************************
			//Set role
			//****************************************************************************
			if (domainConnection.getRoleName().size() > i  - numberNonParticipantConnection) {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText(domainConnection.getRoleName().get(i  - numberNonParticipantConnection));
			} else {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText("");
			}

			//****************************************************************************
			//Set multiplicity
			//****************************************************************************
			//can we assume default lower = 0 and default upper = 1?
			int lower = 0, upper = 1;

			if (domainConnection.getLower().size() > i - numberNonParticipantConnection)
				lower = domainConnection.getLower().get(i - numberNonParticipantConnection);
			if (domainConnection.getUpper().size() > i - numberNonParticipantConnection)
				upper = domainConnection.getUpper().get(i - numberNonParticipantConnection);

			//now set the string
			String multiplicity = "";
			if (lower == 0 && upper == 1)
				;//Do nothing
			else if (upper > 0)
				multiplicity = lower + ".." + upper;
			else if (lower == 0 && upper == -1)
				multiplicity = "*";
			else if (upper == -1)
				multiplicity = lower + "..n";

			//get the label to set
			DomainConnectionParticipantEditPart connection = (DomainConnectionParticipantEditPart) sourceConnections
					.get(i);
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
					.getFigure();
			connectionFigure
					.getFigureDomainConnectionParticipantsMultiplicityFigure()
					.setText(multiplicity);
		}
	}
«ENDDEFINE»

«DEFINE refreshSourceConnections FOR gmfgen::GenNode»
	/**
	 * Updates the connections after one is added. Needed for setting up connection
	 * participants when diagram is loaded.
	 *
	 * @generated
	 */
	@Override
	protected void refreshSourceConnections() {
		super.refreshSourceConnections();
		
		if (this.sourceConnections != null)
			updateConnections();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForDomainConnection FOR gmfgen::GenNode»
	/**
	 * Updates the connections after a value was set and does elision
	 *
	 * @generated
	 */
	 @Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) {
			updateConnections();
		}
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
				.equals("elided")) {
			doElide(false);
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Element
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("expressed") && childrenCache == null) {
			setExpressedVisualState();
		}
	}
«ENDDEFINE»

«DEFINE getToggleValue FOR gmfgen::GenNode»
	/**
	 * 
	 * @return null if no toggeling infotmation is available, else true or fals
	 *
	 * @generated
	 */
	private Boolean getToggleValue()
	{
		boolean collapse = false;
		
		//********************************************************
		//Find the renderer attached to this element 
		//********************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.Element self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Element) this
				.resolveSemanticElement();

		//No rendering information found => all DomainConnection remains expanded
		if (self.getRenderer() == null) {
			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure) figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure) boderItemContainer.getChildren().get(0))
					.setVisible(false);

			return null;
		}

		//********************************************************
		//Do toggling based on information in the diagram
		//********************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.Field collapsedField = null;

		for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : self
				.getRenderer().getChildren()) {
			if (e instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field) {
				if (e.getName().equals("collapsed")) {
					collapse = Boolean
							.parseBoolean(((de.uni_mannheim.informatik.swt.models.plm.PLM.Field) e)
									.getValue());
					break;
				}
			}
		}
		
		return collapse;
	}
«ENDDEFINE»

«DEFINE toggle FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private java.util.List childrenCache = null;

	/**
	 * @generated
	 */
	private org.eclipse.draw2d.geometry.Dimension cachedSize = null;
	
	/**
	 * This renders the DomainConnectionEditPart based on information
	 * in the model. Collapsed means that the DomainConnection is rendered as small 
	 * black rectangle. Collapsed means that the DomainConnection will rendered as
	 * hexagon, its default figure.
	 * 
	 * @generated
	 */
	public void toggle() {
		java.lang.Boolean collapse = getToggleValue();

		«IF self.editPartClassName='DomainConnectionEditPart'»
			//We do not toggle if no renderer is not available or element is elided
			if (collapse == null || ((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)resolveSemanticElement()).isElided())
				return;
		«ELSE»
			//We do not toggle if no renderer is not available
			if (collapse == null)
				return;
		«ENDIF»

		//the figure containing the actual design of the editpart
		//the outer parent is only a container for the border items
		//and the figure of the editpart
		org.eclipse.draw2d.IFigure fig = ((org.eclipse.draw2d.IFigure) figure.getChildren().get(0));
		
		//expand element
		if (!collapse) {
			//Element was not previously collapsed -> can happen at diagram load
			if (childrenCache == null)
			{
				//Hide external name label
				org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
				((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(false);
				
				return;
			}

			this.setBackgroundColor(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(
					org.eclipse.swt.SWT.COLOR_WHITE));

			fig.getChildren().clear();
			fig.getChildren().addAll(childrenCache);
			childrenCache = null;

			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(false);

			org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
			rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(70,
					60));
			org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
					this.getEditingDomain(), "change size", new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(
							(org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
			getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));

			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy());

			return;
		}
		//collapse element
		else {
			//**************************************************
			//Create the new figure (Rectangle with black background)
			//**************************************************

			//figure.getClientArea() ==  null on startup
			org.eclipse.draw2d.geometry.Rectangle rect = (figure.getClientArea() != null) ? figure
					.getClientArea().getCopy() : null;
			childrenCache = (java.util.List) ((java.util.ArrayList) fig.getChildren()).clone();
			fig.getChildren().clear();

			org.eclipse.draw2d.RectangleFigure rf = new org.eclipse.draw2d.RectangleFigure();

			rf.setBackgroundColor(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(
					org.eclipse.swt.SWT.COLOR_BLACK));
			fig.getChildren().add(rf);
			rf.setParent(fig);

			//Show external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(true);

			//A client rectangle existed
			if (rect != null
					&& (rect.width != 0 && rect.height != 0 && rect.x != 0 && rect.y != 0)) {
				cachedSize = rect.getCopy().getSize();
				rect.setSize(8, 8);
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size",
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(
						new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
			}
			//A client rectangle does not exist -> called from activate
			else {
				rf.setSize(8, 8);
			}
			
			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx());
		}
	}
«ENDDEFINE»

«DEFINE addNotify FOR gmfgen::GenNode»
	/**
	 * Needed to toogle DomainConnections on diagram load
	 *
	 * @generated
	 */
	@Override
	public void addNotify() {
		// TODO Auto-generated method stub
		super.addNotify();
		
		toggle();
	}
«ENDDEFINE»	

«DEFINE addNotifyForToggeling FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();
		
		toggle();
		«IF self.editPartClassName = 'DomainConnectionEditPart'»
			doElide(true);
		«ENDIF»
		
		//Toggled, when childerenChache != null
		if (childrenCache == null)
			setExpressedVisualState();
		
	}
«ENDDEFINE»

«DEFINE setExpressedVisualStateForConnections FOR gmfgen::GenNode»
	/**
	 * Sets the figure to visually expressed or computed. Depending on the expressed
	 * value.
	 * 
	 * @generated
	 */
	private void setExpressedVisualState() {
		de.uni_mannheim.informatik.swt.models.plm.PLM.Element self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Element) resolveSemanticElement();
		
		«IF self.editPartClassName = 'DomainConnectionEditPart'»
		//We cannot set expressed state of elided object as they are only "..."
		if (((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)self).isElided())
			return;
		«ENDIF»
		
		if (self.isExpressed()) {
			//get(1) is the border item container
			org.eclipse.draw2d.IFigure defalutSizeNodeFigure = (org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure) figure
					.getChildren().get(0);
			((org.eclipse.draw2d.ScalablePolygonShape) defalutSizeNodeFigure.getChildren().get(0))
					.setLineStyle(SWT.LINE_SOLID);
		} else {
			org.eclipse.draw2d.IFigure defalutSizeNodeFigure = (org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure) figure
					.getChildren().get(0);
			((org.eclipse.draw2d.ScalablePolygonShape) defalutSizeNodeFigure.getChildren().get(0))
					.setLineStyle(SWT.LINE_CUSTOM);
			((org.eclipse.draw2d.ScalablePolygonShape) defalutSizeNodeFigure.getChildren().get(0))
					.setLineDash(new float[] { 10 });
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForField FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Feature 
				&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("expressed"))
		{
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.Feature f = (de.uni_mannheim.informatik.swt.models.plm.PLM.Feature)resolveSemanticElement();
			if (f.isExpressed())
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(false);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(0);
			}
			else
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(true);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(org.eclipse.gmf.runtime.diagram.ui.figures.DiagramColorConstants.diagramGray.handle);
			}
		}

		«IF self.editPartClassName = 'FieldEditPart'»
		//***********************************************************
		//Update DomainEntities on field change (for rendering)
		//***********************************************************
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field) {
			org.eclipse.emf.ecore.EObject field = (org.eclipse.emf.ecore.EObject) notification.getNotifier();
			org.eclipse.emf.ecore.EObject container = field.eContainer();

			//Only DomainEntyties are used to store rendering information
			if (container instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer) {
				//Get all DomainEntities that reference this DomainEntity as renderer
				java.util.Collection<org.eclipse.emf.ecore.EObject> rendererReferencere = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil
						.getReferencers(
								container,
								new org.eclipse.emf.ecore.EReference[] { de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.eINSTANCE
										.getElement_Renderer() });

				for (org.eclipse.emf.ecore.EObject obj : rendererReferencere) {
					org.eclipse.ui.IEditorPart editorPart = org.eclipse.ui.PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage()
							.getActiveEditor();
					//If no PLM Diagram is opened we want to do nothing
					if (!(editorPart instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
						return;
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) editorPart;
					org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart node =
						(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj), org.eclipse.gef.NodeEditPart.class).get(0);
					
					org.eclipse.gef.Request refreshRequest = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH);
					node.performRequest(refreshRequest);
				}
			}
		}
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForMethod FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Feature 
				&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("expressed"))
		{
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.Feature f = (de.uni_mannheim.informatik.swt.models.plm.PLM.Feature)resolveSemanticElement();
			if (f.isExpressed())
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(false);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(0);
			}
			else
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(true);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(org.eclipse.gmf.runtime.diagram.ui.figures.DiagramColorConstants.diagramGray.handle);
			}
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForModel FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) 
	{
		super.handleNotificationEvent(notification);
		
		if(notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
			&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("children"))
		{
			if (notification.getNewValue() != null)
			{
				de.uni_mannheim.informatik.swt.models.plm.PLM.Model m = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model)notification.getNotifier();
				
				if (notification.getNewValue() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)
				{
					de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject c = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)notification.getNewValue();
					de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)m.eContainer();
					c.setLevel(ont.getChildren().indexOf(m));
				}
			}
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model && 
				((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("showRenderer"))
		{
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model model = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model) notification.getNotifier();

			de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] renderers = new de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] {};

			//find all renderers in the model
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.MODEL);

			try 
			{
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("self.children->select(c | c.oclIsTypeOf(Renderer))");
				renderers = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer>) ocl.evaluate(resolveSemanticElement(), q)).toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] {});
			}
			catch (org.eclipse.ocl.ParserException e) 
			{
				e.printStackTrace();
			}
			
			//find the notational elements for the renderers
			for(de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer r : renderers)
			{
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());
				
				while (iter.hasNext())
				{
					org.eclipse.emf.ecore.EObject obj = iter.next();
					
					if (obj instanceof org.eclipse.gmf.runtime.notation.Shape)
					{
						org.eclipse.gmf.runtime.notation.Shape s = (org.eclipse.gmf.runtime.notation.Shape)obj;
						
						if (s.getElement() == r)
						{
							if (model.getShowRenderer().equals("ShowRenderingOptions::NONE"))
								s.setVisible(false);
							else
								s.setVisible(true);
							
							break;
						}
					}
				}
			}
			
			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
				 else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
					&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
							.equals("origin")) 
		{
			de.uni_mannheim.informatik.swt.models.plm.PLM.Element[] elements = new de.uni_mannheim.informatik.swt.models.plm.PLM.Element[] {};
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model model = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model)resolveSemanticElement();
			
			//find all renderers in the model
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL
					.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl
					.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.MODEL);

			try {
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("self.children");
				
				elements = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Element>) ocl
						.evaluate(resolveSemanticElement(), q))
						.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Element[] {});
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}

			//find the notational elements for the renderers
			for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : elements) {
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());

				while (iter.hasNext()) {
					org.eclipse.emf.ecore.EObject obj = iter.next();

					if (obj instanceof org.eclipse.gmf.runtime.notation.Shape) {
						org.eclipse.gmf.runtime.notation.Shape s = (org.eclipse.gmf.runtime.notation.Shape) obj;

						if (s.getElement() == e) {
							if (model.getOrigin().equals("OriginOptions::Expressed") && e.isExpressed()
									|| model.getOrigin().equals("OriginOptions::Computed") && !e.isExpressed()
									|| model.getOrigin().equals("OriginOptions::All"))
								s.setVisible(true);
							else
								s.setVisible(false);

							break;
						}
					}
				}
			}
			
			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("completness")) {
			de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject[] clabjects = new de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject[] {};
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model model = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model) resolveSemanticElement();

			//find all renderers in the model
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL
					.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl
					.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.MODEL);

			try {
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper
						.createQuery("self.children->select(c | c.oclIsKindOf(Clabject))");

				clabjects = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject>) ocl
						.evaluate(resolveSemanticElement(), q))
						.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject[] {});
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}

			//find the notational elements for the renderers
			for (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject c : clabjects) {
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());

				while (iter.hasNext()) {
					org.eclipse.emf.ecore.EObject obj = iter.next();

					if (obj instanceof org.eclipse.gmf.runtime.notation.Shape) {
						org.eclipse.gmf.runtime.notation.Shape s = (org.eclipse.gmf.runtime.notation.Shape) obj;

						if (s.getElement() == c) {
							if (model.getCompletness().equals(
									"CompletnessOptions::NoElision")
									&& c.isElided())
								s.setVisible(false);
							else
								s.setVisible(true);

							break;
						}
					}
				}
			}

			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForOntology FOR gmfgen::GenNode»
	/**
	 * Inform all renderers to set their view state
	 * 
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
		
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology && 
				((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("showRenderer"))
		{
			org.eclipse.ui.IEditorPart editor = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
			if (! (editor instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
				return;
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor)editor;
			de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)notification.getNotifier();

			org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iterator = ont.eAllContents();
			
			while(iterator.hasNext())
			{
				org.eclipse.emf.ecore.EObject obj = iterator.next();
				if (obj instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer)
				{
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart editPart = 
						(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj), de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart.class).get(0);
					editPart.setRendererViewState();
				}
			}
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForDomainEntityEditPart FOR gmfgen::GenNode»
	/**
	 * Listens to the elided and expressed attributes and calls doElide / setExpressedVisualState
	 * 
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("elided")) {
						
			doElide(false);
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("expressed")) {
						
			setExpressedVisualState();
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("name")) {
						
			de.uni_mannheim.informatik.swt.models.plm.PLM.Field[] fields = new de.uni_mannheim.informatik.swt.models.plm.PLM.Field[] {};
			
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.LML_MODEL);
			
			try {
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper
						.createQuery("Field.allInstances()");
				fields = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Field>) ocl
						.evaluate(org.eclipse.emf.ecore.util.EcoreUtil
								.getRootContainer(resolveSemanticElement()), q))
						.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Field[] {});
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}
			
			//We found fields
			if (fields.length > 0) {
				org.eclipse.ui.IEditorPart editor = org.eclipse.ui.PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getActivePage()
						.getActiveEditor();
				if (!(editor instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
					return;

				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) editor;

				for (de.uni_mannheim.informatik.swt.models.plm.PLM.Field f : fields) {
					org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart fieldEditPart = (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) plmEditor
							.getDiagramGraphicalViewer()
							.findEditPartsForElement(
									org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(f),
									org.eclipse.gef.NodeEditPart.class).get(0);
					fieldEditPart.performRequest(new org.eclipse.gef.Request(
							org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
				}
			}
		}
	}
«ENDDEFINE»

«DEFINE elideDomainEntity FOR gmfgen::GenNode»
	/**
	 * Elides the DomainEntity depending on the elided attribute
	 * 
	 * @param readOnlyTransaction when called from addNotify
	 * 
	 * @generated
	 */
	private void doElide(boolean readOnlyTransaction) {
		de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject notifier = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject) resolveSemanticElement();
		org.eclipse.draw2d.RectangleFigure entityFigure = (org.eclipse.draw2d.RectangleFigure) this.getFigure()
				.getChildren().get(0);

		if (notifier.isElided()) {
			for (Object obj : entityFigure.getChildren()) {
				if (obj == entityFigure.getChildren().get(0)
						&& obj instanceof org.eclipse.draw2d.IFigure)
					((org.eclipse.draw2d.IFigure) obj).setVisible(true);
				else if (obj instanceof org.eclipse.draw2d.IFigure)
					((org.eclipse.draw2d.IFigure) obj).setVisible(false);
			}

			entityFigure.setOutline(false);

			//when called from add notify the size is already present in the notational model
			if (!readOnlyTransaction) {
				org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
				rect.setSize(new org.eclipse.draw2d.geometry.Dimension(15, 10));
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size",
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(
						new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
						
				removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx());
			}

			if (targetConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) targetConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure()).setLineStyle(SWT.LINE_CUSTOM);
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure()).setLineDash(new int[] { 10 });
				}
			}
			else if (sourceConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) sourceConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure()).setLineStyle(SWT.LINE_CUSTOM);
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure()).setLineDash(new int[] { 10 });
				}
			}
		} else {
			for (Object obj : entityFigure.getChildren()) {
				if (obj == entityFigure.getChildren().get(0)
						&& obj instanceof org.eclipse.draw2d.IFigure)
					((org.eclipse.draw2d.IFigure) obj).setVisible(false);
				else if (obj instanceof org.eclipse.draw2d.IFigure)
					((org.eclipse.draw2d.IFigure) obj).setVisible(true);
			}

			entityFigure.setOutline(true);
			
			if (!readOnlyTransaction)
			{
				removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy());
				
				org.eclipse.gef.Request autoSize = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_AUTOSIZE);
				performRequest(autoSize);
			}
			
			if (targetConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) targetConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure()).setLineStyle(SWT.LINE_SOLID);
				}
			}
			else if (sourceConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) sourceConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure()).setLineStyle(SWT.LINE_SOLID);
				}
			}
		}
	}

	/**
	 * Elide on diagram start up
	 * 
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();

		doElide(true);
		setExpressedVisualState();
	}
«ENDDEFINE»

«DEFINE doElideForDomainConnectionEditPart FOR gmfgen::GenNode»
	private org.eclipse.draw2d.IFigure figureBeforeElision = null;
	
	/**
	 * Elides the DomainEntity depending on the elided attribute
	 * 
	 * @param readOnlyTransaction when called from addNotify
	 * 
	 * @generated
	 */
	private void doElide(boolean readOnlyTransaction) {
		
		//We do not want to ellide toggeled connections
		if (getToggleValue() != null && getToggleValue())
			return;
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject clab = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)resolveSemanticElement();
		
		//The container that contains the figure and the border item container
		org.eclipse.draw2d.IFigure borderContainer = figure;
		//The figure
		org.eclipse.draw2d.IFigure defaultSizeNodeFigure = (org.eclipse.draw2d.IFigure)borderContainer.getChildren().get(0);
		//the container that contains the border items
		org.eclipse.draw2d.IFigure borderItemContainer = (org.eclipse.draw2d.IFigure)borderContainer.getChildren().get(1);
		
		//Hide the outer label
		((org.eclipse.draw2d.IFigure)borderItemContainer.getChildren().get(0)).setVisible(false);
		
		
		if (clab.isElided())
		{
			org.eclipse.draw2d.IFigure connectionFigure = (org.eclipse.draw2d.IFigure)defaultSizeNodeFigure.getChildren().get(0);
			figureBeforeElision = connectionFigure;
			
			//Set up the new figure for the elided node
			org.eclipse.draw2d.RectangleFigure rf = new org.eclipse.draw2d.RectangleFigure();
			rf.setSize(new org.eclipse.draw2d.geometry.Dimension(30,15));
			defaultSizeNodeFigure.remove(connectionFigure);
			rf.setLayoutManager(new org.eclipse.draw2d.ToolbarLayout());
			rf.setOutline(false);
			
			rf.add((org.eclipse.draw2d.IFigure)connectionFigure.getChildren().get(0));
			//The "..." figure could have been hidden on startup
			((org.eclipse.draw2d.IFigure)rf.getChildren().get(0)).setVisible(true);
			
			defaultSizeNodeFigure.add(rf, 0);
			rf.setParent(defaultSizeNodeFigure);
			
			//On Startup the size is saved in the notational model
			if (!readOnlyTransaction)
			{
				//Resize the elided node
				org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
				rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(10,
						10));
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size", new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(
								(org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
			}
			
			//Dash all lines from to the elided element
			if (targetConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) targetConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineDash(new int[] { 10 });
				}
			} else if (sourceConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) sourceConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineDash(new int[] { 10 });
				}
			}
			
			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx());
			
		}
		//We only need to revert the elision if we have done it when the editor was open
		else if (figureBeforeElision != null)
		{
			//Add back the "..." figure
			org.eclipse.draw2d.RectangleFigure elidedFigure = (org.eclipse.draw2d.RectangleFigure)defaultSizeNodeFigure.getChildren().get(0);
			figureBeforeElision.add((org.eclipse.draw2d.IFigure)elidedFigure.getChildren().get(0), 0);
			
			defaultSizeNodeFigure.getChildren().remove(0);
			defaultSizeNodeFigure.add(figureBeforeElision);
			((org.eclipse.draw2d.IFigure)figureBeforeElision.getChildren().get(0)).setVisible(false);
			
			org.eclipse.gef.Request rr = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_AUTOSIZE);
			performRequest(rr);
			
			//Make all lines from to the elided element solid
			if (targetConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) targetConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
				}
			} else if (sourceConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) sourceConnections) {
					((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
				}
			}
			
			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy());
		}
		//We open the diagram unelided -> hide "..."
		else
		{
			org.eclipse.draw2d.IFigure connectionFigure = (org.eclipse.draw2d.IFigure)defaultSizeNodeFigure.getChildren().get(0);
			((org.eclipse.draw2d.IFigure)connectionFigure.getChildren().get(0)).setVisible(false);
		}
	}
«ENDDEFINE»

«DEFINE setExpressedVisualStateForDomainEntity FOR gmfgen::GenNode»
	/**
	 * Sets the figure to visually expressed or computed. Depending on the expressed
	 * value.
	 * 
	 * @generated
	 */
	private void setExpressedVisualState() {
		de.uni_mannheim.informatik.swt.models.plm.PLM.Element self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Element) resolveSemanticElement();
		if (self.isExpressed()) {
			((org.eclipse.draw2d.RectangleFigure) figure.getChildren().get(0))
					.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
		} else {
			((org.eclipse.draw2d.RectangleFigure) figure.getChildren().get(0))
			.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
			((org.eclipse.draw2d.RectangleFigure) figure.getChildren().get(0))
					.setLineDash(new float[] { 10 });

		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForInheritance FOR gmfgen::GenNode»
	/**
	 * Listens to the expressed attribute and calls setExpressedVisualState
	 * 
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
	
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Element
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("expressed") && childrenCache == null) {
			setExpressedVisualState();
		}
	}
«ENDDEFINE»