«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::diagram::ViewmapAttributesUtils»
«EXTENSION xpt::diagram::editpolicies::LinkUtils»

«AROUND createNodeMethod FOR gmfgen::GenNode-»
«IF getUniqueIdentifier().startsWith('Renderer_')»
	«EXPAND xpt::Common::generatedMemberComment»
	public org.eclipse.gmf.runtime.notation.Node create«getUniqueIdentifier()»(org.eclipse.emf.ecore.EObject domainElement, org.eclipse.gmf.runtime.notation.View containerView, int index, boolean persisted, org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint preferencesHint) {
«IF viewmap.canUseShapeStyle()-»
		org.eclipse.gmf.runtime.notation.Shape node = org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createShape();
«ELSE-»
		org.eclipse.gmf.runtime.notation.Node node = org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createNode();
		node.getStyles().add(org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createDescriptionStyle());«REM»FIXME Contionally add this style, whether toolsmith needs Notes or not«ENDREM»
		«EXPAND xpt::diagram::views::Utils::addFontLineFillStylesConditionally('node.getStyles()') FOR viewmap-»
«ENDIF-»
		«EXPAND xpt::diagram::views::Utils::addLinkedDiagramStyle('node.getStyles()')-»
		«EXPAND xpt::diagram::views::Utils::addCustomStyles('node.getStyles()')-»
		node.setLayoutConstraint(org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createBounds());
		node.setType(«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»);
		org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.insertChildView(containerView, node, index, persisted);
		node.setElement(domainElement);
«IF self.oclIsTypeOf(gmfgen::GenTopLevelNode)-»
		stampShortcut(containerView, node);
«ENDIF-»
		// initializeFromPreferences «REM»XXX Perhaps, do init only once, for complete figure?«ENDREM»
		final org.eclipse.jface.preference.IPreferenceStore prefStore = (org.eclipse.jface.preference.IPreferenceStore) preferencesHint.getPreferenceStore();
		«EXPAND initializeStyles('node', 'prefStore', not viewmap.isFixedForeground(), not viewmap.isFixedBackground(), not viewmap.isFixedFont())-»
		«EXPAND initLabel('node', 'prefStore') FOREACH labels-»
		«EXPAND initCompartment('node', 'prefStore') FOREACH compartments-»
		
		//Code to determine visibility
		EObject parent = domainElement.eContainer();
		
		while (parent != null && !(parent instanceof Model) && !(parent instanceof OntologyEditPart))
		{
			parent = parent.eContainer();
		}
		
		if (parent != null && parent instanceof RenderingContainer)
		{
			if (((RenderingContainer)parent).getShowRenderer().equals("ShowRenderingOptions::NONE"))
				node.setVisible(false);
		}
		
		return node;
	}
«ELSE»
	«targetDef.proceed()»
«ENDIF»
«ENDAROUND»

// FIXME check if there's need for a variable name, see initCompartment for a hint
«DEFINE initLabel(String nodeVar, String prefStoreVar) FOR gmfgen::GenLabel-»
«LET 'label' + self.visualID.repr() AS labelVar-»
		org.eclipse.gmf.runtime.notation.Node «labelVar» = createLabel(«nodeVar», «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall»);
		«EXPAND xpt::diagram::views::Utils::addTextStyle(labelVar + '.getStyles()') FOR modelFacet-»
		«EXPAND xpt::diagram::views::Utils::addCustomStyles(labelVar + '.getStyles()')-»
«IF self.oclIsKindOf(gmfgen::GenExternalNodeLabel) or self.oclIsKindOf(gmfgen::GenLinkLabel)-»
		«labelVar».setLayoutConstraint(org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createLocation());
		«EXPAND xpt::diagram::views::Utils::offset(labelVar)-»
«ENDIF-»
		«EXPAND initializeStyles(labelVar, prefStoreVar, false, false, false)-»
«ENDLET-»
«ENDDEFINE»

// looks for Font/Line/Fill styles in customStyles and initializes, if any (may be forced with boolean params)
// params has*Style are to force respective style initialization (when callee knows certain style was added)  
«DEFINE initializeStyles(String viewVar, String prefStoreVar, Boolean hasLineStyle, Boolean hasFillStyle, Boolean hasFontStyle) FOR gmfgen::GenCommonBase-»
«IF hasLineStyle or self.hasLineStyleInCustom()-»
	«REM»FIXME ColorAttributes is deprecated, should remove and clean the second branch of the disjunction«ENDREM»
	«IF viewmap.isFixedForeground() or viewmap.attributes[gmfgen::ColorAttributes]->notEmpty()-»
		«EXPAND xpt::diagram::views::Utils::foregroundColour(viewVar) FOR viewmap-»
	«ELSE-»
		«EXPAND initForegroundFromPrefs(viewVar, prefStoreVar)-»
	«ENDIF-»
«ENDIF-»
«IF (hasFontStyle or self.hasFontStyleInCustom()) and not viewmap.isFixedFont()-»
		«EXPAND initFontFromPrefs(viewVar, prefStoreVar)-»
«ENDIF-»
«IF hasFillStyle or self.hasFillStyleInCustom()-»
	«IF viewmap.isFixedBackground() or viewmap.attributes[gmfgen::ColorAttributes]->notEmpty()-»
		«EXPAND xpt::diagram::views::Utils::backgroundColour(viewVar) FOR viewmap-»
	«ELSE-»
		«EXPAND initBackgroundFromPrefs(viewVar, prefStoreVar)-»
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE initCompartment(String nodeVar, String prefStoreVar) FOR gmfgen::GenCompartment-»
«LET 'compartment' + self.visualID.repr() AS compartmentVar-»
		«IF styles->notEmpty() or isStoringChildPositions(getLayoutType())»org.eclipse.gmf.runtime.notation.Node «compartmentVar» = «ENDIF»createCompartment(«nodeVar», «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall», «canCollapse», «needsTitle», «listLayout», «listLayout»);
		«EXPAND xpt::diagram::views::Utils::addCustomStyles(compartmentVar + '.getStyles()')-»
«IF isStoringChildPositions(getLayoutType())-»
	«IF viewmap.canUseShapeStyle()-»
		«compartmentVar».add(org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createShapeStyle());
	«ELSE-»
«REM»Intentionally not adding Description style, as it deemed to be useless for compartments (can't avoid for ShapeStyle - benefits of a single style overwheight drawbacks of Description presence)«ENDREM»
		«EXPAND xpt::diagram::views::Utils::addFontLineFillStylesConditionally(compartmentVar + '.getStyles()') FOR viewmap-»
	«ENDIF-»
		«compartmentVar».setLayoutConstraint(org.eclipse.gmf.runtime.notation.NotationFactory.eINSTANCE.createBounds());
		«EXPAND initializeStyles(compartmentVar, prefStoreVar, not viewmap.isFixedForeground(), not viewmap.isFixedBackground(), not viewmap.isFixedFont())-»
«ELSE-»
		«EXPAND initializeStyles(compartmentVar, prefStoreVar, false, false, false)-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«DEFINE initForegroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
	org.eclipse.swt.graphics.RGB lineRGB = org.eclipse.jface.preference.PreferenceConverter.getColor(«prefStoreVar», org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants.PREF_LINE_COLOR);
	org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.setStructuralFeatureValue(«viewVar», org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getLineStyle_LineColor(), org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.RGBToInteger(lineRGB));
«ENDDEFINE»

«DEFINE initBackgroundFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
	org.eclipse.swt.graphics.RGB fillRGB = org.eclipse.jface.preference.PreferenceConverter.getColor(«prefStoreVar», org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants.PREF_FILL_COLOR);
	org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.setStructuralFeatureValue(«viewVar», org.eclipse.gmf.runtime.notation.NotationPackage.eINSTANCE.getFillStyle_FillColor(), org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.RGBToInteger(fillRGB));
«ENDDEFINE»

«DEFINE initFontFromPrefs(String viewVar, String prefStoreVar) FOR gmfgen::GenCommonBase-»
	org.eclipse.gmf.runtime.notation.FontStyle «viewVar»FontStyle = (org.eclipse.gmf.runtime.notation.FontStyle) «viewVar».getStyle(org.eclipse.gmf.runtime.notation.NotationPackage.Literals.FONT_STYLE);
	if («viewVar»FontStyle != null) {«REM»Given this template is invoked only when FontStyle is present, no need to check fontStyle for null, but at least this gives a scope for fontData var«ENDREM»
		org.eclipse.swt.graphics.FontData fontData = org.eclipse.jface.preference.PreferenceConverter.getFontData(«prefStoreVar», org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants.PREF_DEFAULT_FONT);
		«viewVar»FontStyle.setFontName(fontData.getName());
		«viewVar»FontStyle.setFontHeight(fontData.getHeight());
		«viewVar»FontStyle.setBold((fontData.getStyle() & org.eclipse.swt.SWT.BOLD) != 0);
		«viewVar»FontStyle.setItalic((fontData.getStyle() & org.eclipse.swt.SWT.ITALIC) != 0);
		org.eclipse.swt.graphics.RGB fontRGB = org.eclipse.jface.preference.PreferenceConverter.getColor(«prefStoreVar», org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants.PREF_FONT_COLOR);
		«viewVar»FontStyle.setFontColor(org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.RGBToInteger(fontRGB).intValue());
	}
«ENDDEFINE»