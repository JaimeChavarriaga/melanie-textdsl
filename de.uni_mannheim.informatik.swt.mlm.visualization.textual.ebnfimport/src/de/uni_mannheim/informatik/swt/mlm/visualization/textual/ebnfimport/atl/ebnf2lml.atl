-- /*******************************************************************************
-- * Copyright (c) 2013 University of Mannheim: Chair for Software Engineering.
-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- * 
-- * Contributors:
-- *     Nikolai Hellwig - initial API and implementation
-- ******************************************************************************/
--
-- @atlcompiler atlMLMcompiler
-- @path PLM=/de.uni_mannheim.informatik.swt.models.plm.textualrepresentation/model/PLM.textualrepresentation.ecore
-- @ ---- path PLM2=/de.uni_mannheim.informatik.swt.models.plm/model/PLM.ecore
-- @path EBNF=/de.uni_mannheim.informatik.swt.models.ebnf/model/ebnfmm.ecore


module ebnf2lml;
create OUT: PLM from IN: EBNF;

-- counter helpers
helper def: EBNF_GroupCounter: Integer =
	0;

helper def: EBNF_OptionalCounter: Integer =
	0;

helper def: EBNF_NonTerminalReferenceCounter: Integer =
	0;

helper def: EBNF_ChoiceCounter: Integer =
	0;

helper def: EBNF_TerminalCounter: Integer =
	0;

helper def: EBNF_RepetitionCounter: Integer =
	0;

helper def: EBNF_SpecialSequenceCounter: Integer =
	0;

helper def: EBNF_ExceptCounter: Integer =
	0;

-- filtered list for Controls
helper context EBNF!Control def: filteredDefList: Sequence(EBNF!Symbol) =
	self.definitionList;

-- filtered list for NonTerminals
helper context EBNF!NonTerminal def: filteredDefList: Sequence(EBNF!Symbol) =
	self.definitionList;

-- get container
-- TODO: FIX FOR CONTROLS AS CONTAINERS
helper context EBNF!Symbol def: container: OclAny =
	if self.containingNonTerminal.oclIsUndefined() then
		self.containingControl
	else
		self.containingNonTerminal
	endif;

helper context EBNF!Symbol def: calculatedLowerFactor: Integer =
	if self.factor = 0 then
		1
	else
		self.factor
	endif;

helper context EBNF!Symbol def: calculatedUpperFactor: Integer =
	if self.factor = 0 then
		1
	else
		self.factor
	endif;

helper context String def: removePackage: String =
	self.substring(self.indexOf('!')+2, self.size());

helper context EBNF!Symbol def: uniqueName: String =
	let cleanName: String =
		'EBNF_'.concat(self.oclType().toString().removePackage)
	in
		cleanName.concat(thisModule.refGetValue(cleanName.concat('Counter')) ->
				toString());

helper context EBNF!Symbol def: increaseCounter: OclAny =
	let cleanName: String =
		'EBNF_'.concat(self.oclType().toString().removePackage)
	in
		thisModule.refSetValue(cleanName.concat('Counter'), thisModule.
				refGetValue(cleanName.concat('Counter')) + 1);

-- RULE TOP ELEMENTS
rule NonTerminal2Entity {
	from
		nonTerminal: EBNF!NonTerminal
	to
		entity: PLM!Entity (
			_l_.name <- nonTerminal.id,
			_l_.visualizer <- Sequence{ lmlVisualizer }
		),
		lmlVisualizer: PLM!LMLVisualizer (
			dslVisualizer <- Sequence{visualizer}
		),
		visualizer: PLM!TextualDSLVisualizer (
			root <- entity,
			content <- nonTerminal.filteredDefList -> collect(e | thisModule.
					resolveTemp(e, 'visual'))
		)
}

-- SYMBOLS

abstract rule GeneralSymbol2Entity{
	from
		symbol: EBNF!FactorableSymbol
	to
		entity: PLM!Entity (
			_l_.name <- symbol.uniqueName,
			_l_.visualizer <- Sequence{ lmlVisualizer }
		),
		lmlVisualizer: PLM!LMLVisualizer (
			dslVisualizer <- Sequence{visualizer}
		),
		visualizer: PLM!TextualDSLVisualizer (
			root <- symbol
		)	
}

abstract rule Symbol2Entity extends GeneralSymbol2Entity{
	from
		symbol: EBNF!FactorableSymbol (
			symbol.containingChoice.oclIsUndefined()
		)
	to
		visual: PLM!Value (
			expression <- symbol.uniqueName
		),
		connection: PLM!Connection(
			_l_.participation <- Sequence{participation1, participation2}
		),
		participation1: PLM!Participation (
			lower <- symbol.calculatedLowerFactor,
			upper <- symbol.calculatedUpperFactor,
			destination <- symbol
		),
		participation2: PLM!Participation (
			lower <- 1,
			upper <- 1,
			destination <- symbol.container
		)
}

abstract rule Symbol2EntityInChoice extends GeneralSymbol2Entity {
	from
		symbol: EBNF!FactorableSymbol (
			not symbol.containingChoice.oclIsUndefined()
		)
	to
		entity: PLM!Entity ()
}

-- TERMINAL
-- TODO: FIX FOR DIRECT LITERAL
rule Terminal2EntityInChoice extends Symbol2EntityInChoice{
	from
		symbol: EBNF!Terminal
	to
		terminalReference: PLM!Entity(
			_l_.name <- 'TR_'.concat(symbol.uniqueName),
			_l_.visualizer <- Sequence{ tr_lmlVisualizer }
		),
		visualDescriptor: PLM!Literal (
			expression <- symbol.terminalString
		),
		visualizer: PLM!TextualDSLVisualizer (
			content <- Sequence{visualDescriptor}
		),
		connection: PLM!Connection(
			_l_.participation <- Sequence{participation1, participation2}
		),
		participation1: PLM!Participation (
			lower <- symbol.calculatedLowerFactor,
			upper <- symbol.calculatedUpperFactor,
			destination <- entity
		),
		participation2: PLM!Participation (
			lower <- 1,
			upper <- 1,
			destination <- terminalReference
		),
		tr_Value: PLM!Value (
			expression <- symbol.uniqueName
		),
		tr_lmlVisualizer: PLM!LMLVisualizer (
			dslVisualizer <- Sequence{tr_visualizer}
		),
		tr_visualizer: PLM!TextualDSLVisualizer (
			root <- terminalReference,
			content <- Sequence{tr_Value}
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Terminal2Entity {
	from
		symbol: EBNF!Terminal
	to
		visual: PLM!Literal (
			expression <- symbol.terminalString,
			lower <- symbol.calculatedLowerFactor,
			upper <- symbol.calculatedUpperFactor
		)
	do {
		symbol.increaseCounter; 
	}
}

rule NonTerminalReference2Entity extends Symbol2Entity {
	from
		symbol: EBNF!NonTerminalReference
	to
		entity: PLM!Entity (
		),
		visualDescriptor: PLM!Value (
			expression <- symbol.nonTerminal.id
		),
		visualizer: PLM!TextualDSLVisualizer (
			content <- Sequence{visualDescriptor}
		)
	do {
		symbol.increaseCounter; 
	}
}

rule NonTerminalReference2EntityInChoice extends Symbol2EntityInChoice {
	from
		symbol: EBNF!NonTerminalReference
	to
		entity: PLM!Entity (
		),
		visualDescriptor: PLM!Value (
			expression <- symbol.nonTerminal.id
		),
		visualizer: PLM!TextualDSLVisualizer (
			content <- Sequence{visualDescriptor}
		),
		connection: PLM!Connection(
			_l_.participation <- Sequence{participation1, participation2}
		),
		participation1: PLM!Participation (
			lower <- symbol.calculatedLowerFactor,
			upper <- symbol.calculatedUpperFactor,
			destination <- symbol.nonTerminal
		),
		participation2: PLM!Participation (
			lower <- 1,
			upper <- 1,
			destination <- symbol
		)
	do {
		symbol.increaseCounter; 
	}
}

-- SPECIAL SEQUENCE
rule SpecialSequence2Entity extends Symbol2Entity {
	from
		symbol: EBNF!SpecialSequence
	to
		entity: PLM!Entity (
		),
		visualDescriptor: PLM!Literal (
			expression <- symbol.text
		),
		visualizer: PLM!TextualDSLVisualizer (
			content <- Sequence{visualDescriptor}
		)
	do {
		symbol.increaseCounter; 
	}
}

rule SpecialSequence2EntityInChoice extends Symbol2EntityInChoice{
	from
		symbol: EBNF!SpecialSequence
	to
		entity: PLM!Entity (
		),
		visualDescriptor: PLM!Literal (
			expression <- symbol.text
		),
		visualizer: PLM!TextualDSLVisualizer (
			content <- Sequence{visualDescriptor}
		)
	do {
		symbol.increaseCounter; 
	}
}

-- CHOICE
rule Choice2Inheritance {
	from
		choice: EBNF!Choice
	to
		entity: PLM!Entity (
			_l_.name <- choice.uniqueName
		),
		visual: PLM!Value (
			expression <- choice.uniqueName
		),
		generalization: PLM!Generalization (
			supertype <- Sequence{entity},
			subtype <- choice.definitionList
		),
		connection: PLM!Connection(
			_l_.participation <- Sequence{participation1, participation2}
		),
		participation1: PLM!Participation (
			lower <- 1,
			upper <- 1,
			destination <- choice
		),
		participation2: PLM!Participation (
			lower <- 1,
			upper <- 1,
			destination <- choice.container
		)
	do {
		choice.increaseCounter; 
	}
}

-- CONTROLS

-- GENERAL CONTROL

abstract rule Control2Entity extends Symbol2Entity{
	from
		symbol: EBNF!Control
	to
		visualizer: PLM!TextualDSLVisualizer (
			root <- symbol,
			content <- symbol.filteredDefList -> collect(e | thisModule.resolveTemp(e,
					'visual'))
		)
}

abstract rule Control2EntityInChoice extends Symbol2Entity{
	from
		symbol: EBNF!Control
	to
		visualizer: PLM!TextualDSLVisualizer (
			root <- symbol,
			content <- symbol.filteredDefList -> collect(e | thisModule.resolveTemp(e,
					'visual'))
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Group2Entity extends Control2Entity {
	from
		symbol: EBNF!Group
	to
		entity: PLM!Entity (
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Group2EntityInChoice extends Control2EntityInChoice {
	from
		symbol: EBNF!Group
	to
		entity: PLM!Entity (
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Optional2Entity extends Control2Entity {
	from
		symbol: EBNF!Optional
	to
		entity: PLM!Entity (
		),
		participation1: PLM!Participation (
			lower <- 0
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Optional2EntityInChoice extends Control2EntityInChoice {
	from
		symbol: EBNF!Optional
	to
		entity: PLM!Entity (
		),
		participation1: PLM!Participation (
			lower <- 0
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Repitition2Entity extends Control2Entity {
	from
		symbol: EBNF!Repetition
	to
		entity: PLM!Entity (
		),
		participation1: PLM!Participation (
			lower <- 0,
			upper <- -1
		)
	do {
		symbol.increaseCounter; 
	}
}

rule Repitition2EntityInChoice extends Control2EntityInChoice {
	from
		symbol: EBNF!Repetition
	to
		entity: PLM!Entity (
		),
		participation1: PLM!Participation (
			lower <- 0,
			upper <- -1
		)
	do {
		symbol.increaseCounter; 
	}
}

-- EXCEPT
-- TODO: FIX IT, in the FINAL VERSION THERE MUST BE SOME KIND OF EXCEPT HANDLING
rule Except2Entity extends Symbol2Entity {
	from
		symbol: EBNF!Except
	to
		entity: PLM!Entity(),
		visualizer: PLM!TextualDSLVisualizer (
			root <- symbol,
			content <- symbol.filteredDefList -> collect(e | thisModule.resolveTemp(e,
					'visual')).append(thisModule.resolveTemp(symbol.except,
					'visual'))
		)
--		minuend: PLM!Entity(
--			_l_.name <- 'Min_'.concat(symbol.definitionList->first().uniqueName),
--			_l_.visualizer <- Sequence{ m_lmlVisualizer }
--		),
--		m_lmlVisualizer: PLM!LMLVisualizer (
--			dslVisualizer <- Sequence{m_visualizer}
--		),
--		m_visualizer: PLM!TextualDSLVisualizer (
--			root <- minuend,
--			content <- Sequence {m_visual}
--		),
--		m_visual: PLM!Value (
--			expression <- symbol.definitionList->first().uniqueName
--		),
--		subtrahend: PLM!Entity(
--			_l_.name <- 'Sub_'.concat(symbol.except.uniqueName),
--			_l_.visualizer <- Sequence{ s_lmlVisualizer }
--		),
--		s_lmlVisualizer: PLM!LMLVisualizer (
--			dslVisualizer <- Sequence{s_visualizer}
--		),
--		s_visualizer: PLM!TextualDSLVisualizer (
--			root <- minuend,
--			content <- Sequence {s_visual}
--		),
--		s_visual: PLM!Value (
--			expression <- symbol.except.uniqueName
--		)
	do {
		symbol.increaseCounter;
	}
}
