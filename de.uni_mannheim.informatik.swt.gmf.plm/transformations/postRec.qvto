/*******************************************************************************
 * Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************/

modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
	
transformation postRec(inout gmfgenModel : GMFGEN);

property genNavigator : GenNavigator = null;
property genStandardPrefencePage : GenStandardPreferencePage = null;
property genPlugIn : GenPlugin = null;
property genEditorGenerator : GenEditorGenerator = null;
property genDiagram : GenDiagram = null;
property genPropertySheet : GenPropertySheet = null;
		
 
main() {
	
	--Needed for Attribute/Method Resize when visualizers are shown/hidden Bug 344104
	gmfgenModel.objectsOfType(GenChildNode)->asOrderedSet()
		->select(c | c.editPartClassName.startsWith("Attribute") 
			or c.editPartClassName.startsWith("Method"))->forEach(node)
		{
			var defaultSize := new DefaultSizeAttributes();
			defaultSize.height := 20;
			defaultSize.width := 0;
			node.viewmap.attributes := Sequence{defaultSize};
		};
	
	--Set ListLayout for Model(Clabject) Compartment
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName = "OntologyModelCompartmentEditPart")->first()
				.listLayout := true;
	
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName.find("Attributes") > 0)->forEach(comp)
				{
					comp.listLayout := true;
				};
	
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName.find("Methods") > 0)->forEach(comp)
				{
					comp.listLayout := true;
				};
	
	
	
	--Setup the GenEditorGenerator
	this.genEditorGenerator := gmfgenModel.objectsOfType(GenEditorGenerator)->asOrderedSet()->first();
	genEditorGenerator.sameFileForDiagramAndModel := true;
	genEditorGenerator.dynamicTemplates := true;
	genEditorGenerator.templateDirectory := "/de.uni_mannheim.informatik.swt.gmf.plm/templates";
	genEditorGenerator.diagramFileExtension := "lml";
	genEditorGenerator.modelID := "LML";
	
	--Setup the GenDiagram
	genDiagram
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->first();
	genDiagram.validationEnabled := true;
	genDiagram.validationDecorators := true;
	genDiagram.validationProviderPriority := ProviderPriority::Medium;
	genDiagram.validationDecoratorProviderPriority := ProviderPriority::Medium;
	genDiagram.creationWizardCategoryID := "de.uni_mannheim.informatik.swt.lmlcategory";
	
	--Setup the GenPlugin
	this.genPlugIn := gmfgenModel.objectsOfType(GenPlugin)->asOrderedSet()->first();
	genPlugIn.provider := "University of Mannheim: Chair for Software Engineering";
	genPlugIn.name := "Level-agnostic Modelling Language (LML) Plugin";
	genPlugIn.printingEnabled := true;
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.itemis.gmf.runtime.extensions');
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.uni_mannheim.informatik.swt.gmf.plm');
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.uni_mannheim.informatik.swt.plm.visualization.service');
	
	--Set the properties for the Prefrence Page (Window -> Preferences)
	this.genStandardPrefencePage := gmfgenModel.objectsOfType(GenStandardPreferencePage)->asOrderedSet()->first();
	genStandardPrefencePage.name := "LML Diagram Editor";
	
	--Setup the linguistic properties view
	this.genPropertySheet := gmfgenModel.objectsOfType(GenPropertySheet)->asOrderedSet()->first();
	genPropertySheet.tabs->select(t | t.iD = 'domain')->first().label := 'Linguistic';
	
	--Build up the navigation structure
	this.genNavigator := gmfgenModel.objectsOfType(GenNavigator)->asOrderedSet()->first();

	--Clear all child entries
	this.genNavigator.childReferences := OrderedSet{};

	--Root group for the LMLModel container
	var LMLModelChildReference 
		:= new GenNavigatorChildReference();
	LMLModelChildReference.child 
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	
	--Group for all Entities that contain Ontology rendering information
	--var rootEnitiyChildReference 
	--	:= xmap createChildReference("EditPart", "LMLModelEditPart", "Entities",  "icons/clabject16.gif");
	--rootEnitiyChildReference.parent 
	--	:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	--s for Entities that describe rendering of ontologies
	--var rootChildReference 
	--	:= xmap createChildReference("EditPart", "EntityEditPart", "s", "icons/16.gif");
	--Methods for Entities that describe rendering of ontologies
	--var rootMethodChildReference 
	--	:= xmap createChildReference("MethodEditPart", "EntityEditPart", "Methods", "icons/method16.gif");
	
	--Group for all Ontologies
	var ontologyChildReference 
		:= xmap createChildReference("OntologyEditPart", "LMLModelEditPart", "Ontologies", "icons/ontology16.gif");
	ontologyChildReference.parent 
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	--Group for the visualizers of the ontology
	var ontVisualizerChildReference 
		:= xmap createChildReference("Visualizer10EditPart", "OntologyEditPart", "Visualizers", "icons/visualizer16.gif");
	
	--Group for all Models
	var modelChildReference 
		:= xmap createChildReference("ModelEditPart", "OntologyEditPart", "Models", "icons/model16.gif");
	--Group for all ModelVisualizers
	var modelVisualizerChildReference 
		:= xmap createChildReference("Visualizer2EditPart", "ModelEditPart", "Visualizers", "icons/visualizer16.gif");
	
	
	--Group for all Entities
	var entityChildReference 
		:= xmap createChildReference("EntityEditPart", "ModelEditPart", "Entities", "icons/clabject16.gif");
		--s for Entities that describe rendering of ontologies
	var entityAttributeChildReference 
		:= xmap createChildReference("Attribute2EditPart", "EntityEditPart", "Attributes", "icons/field16.gif");
	--Methods for Entities that describe rendering of ontologies
	var entityMethodChildReference
		:= xmap createChildReference("MethodEditPart", "EntityEditPart", "Methods", "icons/method16.gif");
	var entityVisualizerChildReference
		:= xmap createChildReference("Visualizer9EditPart", "EntityEditPart", "Visualizers", "icons/visualizer16.gif");
	
	
	--Group for all Connections
	var connectionChildReference 
		:= xmap createChildReference("ConnectionEditPart", "ModelEditPart", "Connections", "icons/connection16.gif");
	--Group for all ConnectionAttributes
	var connectionAttributeChildReference 
		:= xmap createChildReference("AttributeEditPart", "ConnectionEditPart", "Attributes", "icons/field16.gif");
	--Group for all ConnectionVisualizers
	var connectionVisualizerChildReference 
		:= xmap createChildReference("VisualizerEditPart", "ConnectionEditPart", "Visualizers", "icons/visualizer16.gif");
		
	--Group for all MultipleGeneralizations
	var multipleGeneralizationChildReference 
		:= xmap createChildReference("MultipleGeneralizationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
	--Group for all MultipleGeneralizationVisualizers
	var multipleGeneralizationVisualizerChildReference 
		:= xmap createChildReference("Visualizer6EditPart", "MultipleGeneralizationEditPart", "Visualizers", "icons/visualizer16.gif");
	
		
	--Group for all MultipleSpecializations
	var multipleSpecializationChildReference 
		:= xmap createChildReference("MultipleSpecializationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
	--Group for all MultipleSpecializationVisualizers
	var multipleSpecializationVisualizerChildReference 
		:= xmap createChildReference("Visualizer7EditPart", "MultipleSpecializationEditPart", "Visualizers", "icons/visualizer16.gif");
	
	
	--Group for all BinaryGeneralizations
	var binaryGeneralizationChildReference 
		:= xmap createChildReference("BinaryGeneralizationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
	--Group for all BinaryGeneralizationVisualizers
	var binaryGeneralizationVisualizerChildReference
		:= xmap createChildReference("Visualizer8EditPart", "BinaryGeneralizationEditPart", "Visualizers", "icons/visualizer16.gif");
	
	--Group for all ComplementSetRelationships
	var complementChildReference 
		:= xmap createChildReference("ComplementEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all ComplementSetRelationshipVisualizers
	var complementVisualizerChildReference 
		:= xmap createChildReference("Visualizer3EditPart", "ComplementEditPart", "Visualizers", "icons/visualizer16.gif");
		
		
	--Group for all EqualSetRelationships
	var equalChildReference 
		:= xmap createChildReference("EqualityEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all EqualSetRelationships
	var equalVisualizerChildReference 
		:= xmap createChildReference("Visualizer4EditPart", "EqualityEditPart", "Visualizers", "icons/visualizer16.gif");		
	
	--Group for all InversionSetRelationships
	var inversionChildReference 
		:= xmap createChildReference("InversionEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all InversionSetRelationshipVisualizers
	var inversionVisualizerChildReference 
		:= xmap createChildReference("Visualizer5EditPart", "InversionEditPart", "Visualizers", "icons/visualizer16.gif");
	
	this.genNavigator.childReferences += 
		OrderedSet{LMLModelChildReference, --rootEnitiyChildReference, rootChildReference, rootMethodChildReference,
					 ontologyChildReference, ontVisualizerChildReference, modelChildReference, modelVisualizerChildReference,
					entityChildReference, entityVisualizerChildReference, entityAttributeChildReference, 
					entityMethodChildReference, connectionChildReference, connectionVisualizerChildReference, 
					connectionAttributeChildReference, --connectionFieldMethodChildReference
					binaryGeneralizationChildReference, binaryGeneralizationVisualizerChildReference,
					multipleGeneralizationChildReference, multipleGeneralizationVisualizerChildReference, 
					multipleSpecializationChildReference, multipleSpecializationVisualizerChildReference,
					complementChildReference, complementVisualizerChildReference, 
					equalChildReference, equalVisualizerChildReference,
					inversionChildReference, inversionVisualizerChildReference};
	
	--fix BUG 331875
	gmfgenModel.objectsOfType(ExpressionLabelParser)->forEach(parser)
	{
		parser.className := parser.className.concat(parser._uses->first().container().oclAsType(GenCommonBase).visualID.toString());
	};
}

mapping createChildReference(childEditPartName:String, parentEditPartName:String, groupName:String, icon:String): GenNavigatorChildReference
{
	result.child := gmfgenModel.objectsOfType(GenNode)->asOrderedSet()->select(n | n.editPartClassName = childEditPartName)->first();
	result.parent := gmfgenModel.objectsOfType(GenNode)->asOrderedSet()->select(n | n.editPartClassName = parentEditPartName)->first();
	result.hideIfEmpty := false;
	result.groupName := groupName;
	result.groupIcon := icon;
}