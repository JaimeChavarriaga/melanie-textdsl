/*******************************************************************************
 * Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************/

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::editor::Utils»

«/*
	- Validation on SelectionChanged
	- Rebuild of DSL Palette on Selection Changed
 */»

«AROUND additions FOR gmfgen::GenEditorView-»
	/**
 	 * @generated
 	 */
	private org.eclipse.ui.ISelectionListener selectionListener = new org.eclipse.ui.ISelectionListener() {
		@Override
		public void selectionChanged(org.eclipse.ui.IWorkbenchPart part, org.eclipse.jface.viewers.ISelection selection) {
			if (	//Happens on startup
					org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage() != null
					&& part instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor
					&& selection instanceof org.eclipse.jface.viewers.StructuredSelection
					&& ((org.eclipse.jface.viewers.IStructuredSelection)selection).getFirstElement() instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)
			{
				
				org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart = (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)((org.eclipse.jface.viewers.IStructuredSelection)selection).getFirstElement();
				//Model validation on selection change
				//ValidateAction.runValidation((org.eclipse.gmf.runtime.notation.View)org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer(editPart.getNotationView()));
				
				//Debugcode
				//System.out.println("Selected : " + editPart.getClass().getName());
				
				if (editPart.resolveSemanticElement() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Element)
					managePalette((de.uni_mannheim.informatik.swt.models.plm.PLM.Element)editPart.resolveSemanticElement());
			}
		}
	};
	
	/**
	 * @generated
	 */
	@Override
	protected void startListening() {
		super.startListening();
		
		org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().addPostSelectionListener(selectionListener);
	}
	
	/**
	 * @generated
	 */
	@Override
	protected void stopListening() {
		super.stopListening();
		
		org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().removePostSelectionListener(selectionListener);
	}
	
	/**
	 * @generated
	 */
	@Override
	public void doSave(org.eclipse.core.runtime.IProgressMonitor progressMonitor) {
		de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.ValidateAction.runValidation(this.getDiagram());
		
		super.doSave(progressMonitor);
	}

	/**
	 * @generated
	 */
	public org.eclipse.gef.ui.palette.PaletteViewer getPalette()
	{
		return getEditDomain().getPaletteViewer();
	}
	
	/**
	 * @generated
	 */
	private org.eclipse.gef.palette.PaletteDrawer dslElementsGroup = null;
	/**
	 * @generated
	 */
	
	
	/**
	 * @generated
	 */
	private void managePalette(de.uni_mannheim.informatik.swt.models.plm.PLM.Element selectedElement)
	{
		//Does the DSL Elements group alread exist? => Create it
		if (dslElementsGroup == null)
		{
			org.eclipse.gef.palette.PaletteRoot root = getEditDomain().getPaletteViewer().getPaletteRoot();
			
			dslElementsGroup = new org.eclipse.gef.palette.PaletteDrawer("DSL Elements");
			dslElementsGroup.setId("dslElementsGroup"); 
			
			root.add(dslElementsGroup);
		}
		
		dslElementsGroup.getChildren().clear();
		
		//An ontology offers no context from which we can retrieve the DSL Elements
		if (selectedElement instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)
		{
			dslElementsGroup.setVisible(false);
			return;
		}
			
		org.eclipse.emf.ecore.EObject container = selectedElement;
		
		//Find the containing model
		while (container != null && !(container instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model))
			container = container.eContainer();
		
		//No model found..
		if (container == null)
		{
			dslElementsGroup.setVisible(false);
			return;
		}
		
		// search for the next higher level
		de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology o = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)container.eContainer();
		
		//We are at the highest level
		if (o.getContent().indexOf(container) == 0)
		{
			dslElementsGroup.setVisible(false);
			return;
		}
		else
			dslElementsGroup.setVisible(true);
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.Model higherModel = o.getContent().get(o.getContent().indexOf(container) - 1);
		
		
		java.util.LinkedList<org.eclipse.gef.palette.ToolEntry> entries = new java.util.LinkedList<org.eclipse.gef.palette.ToolEntry>();
		//Fill the palette
		for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : higherModel.getContent())
		{
			//For entities we simply create the entry
			if (e instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Entity && ((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)e).isInstantiable()
				&& ((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)e).getPotency() != 0)
			{
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry entry = new de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry(
						e.getName(),
						"Creates a new " + e.getName(),
						java.util.Collections.singletonList(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Entity_3069));
				
				entry.setId("dsl." + org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(e) + ".CreationTool");
				entry.setSmallIcon(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditorPlugin
						.findImageDescriptor("/de.uni_mannheim.informatik.swt.gmf.plm/icons/clabject16.gif")); //$NON-NLS-1$
				entry.setLargeIcon(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditorPlugin
						.findImageDescriptor("/de.uni_mannheim.informatik.swt.gmf.plm/icons/clabject16.gif"));
				
				entries.add(entry);
			}
			
			//For connections we also need to have the connecting lines
			else if (e instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Connection && ((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)e).isInstantiable()
						&& ((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)e).getPotency() != 0)
			{
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry entry = new de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry(
						((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)e).getHumanReadableName(),
						"Creates a new " + ((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)e).getHumanReadableName(),
						java.util.Collections.singletonList(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Connection_3060));
				
				entry.setId("dsl." + org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(e) + ".CreationTool");
				entry.setSmallIcon(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditorPlugin
						.findImageDescriptor("/de.uni_mannheim.informatik.swt.gmf.plm/icons/connection16.gif"));
				entry.setLargeIcon(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditorPlugin
						.findImageDescriptor("/de.uni_mannheim.informatik.swt.gmf.plm/icons/connection16.gif"));
				
				entries.add(entry);
			
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.LinkToolEntry linkEntry = new de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.LinkToolEntry(
						((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)e).getHumanReadableName(),
						"Creates a new " + ((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)e).getHumanReadableName(),
						java.util.Collections.singletonList(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.ConnectionParticipant_4021));
						
				linkEntry.setId("dsl." + org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(e) + ".CreationTool");
				linkEntry.setSmallIcon(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditorPlugin
						.findImageDescriptor("/de.uni_mannheim.informatik.swt.gmf.plm/icons/connectionParticipant16.gif"));
				linkEntry.setLargeIcon(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditorPlugin
						.findImageDescriptor("/de.uni_mannheim.informatik.swt.gmf.plm/icons/connectionParticipant16.gif"));
				
				entries.add(linkEntry);
			}
		}
		
		java.util.Collections.sort(entries, new java.util.Comparator<org.eclipse.gef.palette.ToolEntry>() {

			@Override
			public int compare(org.eclipse.gef.palette.ToolEntry o1, org.eclipse.gef.palette.ToolEntry o2) {
				//All Entities need to go to the top
				if (o1 instanceof  de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry
						&& ((de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry) o1).elementTypes.contains(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Entity_3069)) {
					//We compare to a connection node or link entry -> We want to be first
					if (o2 instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry
							&& !((de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry) o2).elementTypes.contains(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Entity_3069)
							|| o2 instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.LinkToolEntry)
						return -1;
					//We are two Entities -> Sort by name
					else
						return (o1.getLabel().compareToIgnoreCase(o2.getLabel()));

				}
				else if (o1 instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry
						&& !((de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry) o1).elementTypes.contains(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Entity_3069)
						|| o1 instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.LinkToolEntry){
					//We compare to a connection node or link entry -> We want to be first
					if (o2 instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry
							&& ((de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor.NodeToolEntry) o2).elementTypes.contains(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Entity_3069))
						return 1;
					//We are two Connections -> Sort by name
					else {
						if ((o1.getLabel() == null || o1.getLabel().length() == 0) && (o2.getLabel() == null || o2.getLabel().length() == 0))
							return 0;
						else if ((o1.getLabel() == null || o1.getLabel().length() == 0) && (o2.getLabel() != null || o2.getLabel().length() != 0))
							return 1;
						else if ((o1.getLabel() != null || o1.getLabel().length() != 0) && (o2.getLabel() == null || o2.getLabel().length() == 0))
							return -1;
						else
							return o1.getLabel().compareToIgnoreCase(o2.getLabel());
					}
				}
				return 0;
			}
		});
		
		dslElementsGroup.addAll(entries);
		
		if (dslElementsGroup.getChildren().size() == 0)
			dslElementsGroup.setVisible(false);
	}
	
	/**
	 * @generated
	 */
	private static class NodeToolEntry extends org.eclipse.gef.palette.ToolEntry {

		/**
		 * @generated
		 */
		private final java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> elementTypes;

		/**
		 * @generated
		 */
		private NodeToolEntry(String title, String description,
				java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> elementTypes) {
			super(title, description, null, null);
			this.elementTypes = elementTypes;
		}

		/**
		 * @generated
		 */
		public org.eclipse.gef.Tool createTool() {
			org.eclipse.gef.Tool tool = new org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool(elementTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
	
		/**
	 * @generated
	 */
	private static class LinkToolEntry extends org.eclipse.gef.palette.ToolEntry {

		/**
		 * @generated
		 */
		private final java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> relationshipTypes;

		/**
		 * @generated
		 */
		private LinkToolEntry(String title, String description,
				java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> relationshipTypes) {
			super(title, description, null, null);
			this.relationshipTypes = relationshipTypes;
		}

		/**
		 * @generated
		 */
		public org.eclipse.gef.Tool createTool() {
			org.eclipse.gef.Tool tool = new org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool(relationshipTypes);
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
«ENDAROUND»

«AROUND doSaveAs FOR gmfgen::GenEditorView-»
	«EXPAND xpt::Common::generatedMemberComment»
public void doSaveAs() {
	de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.ValidateAction.runValidation(this.getDiagram());
	
	performSaveAs(new org.eclipse.core.runtime.NullProgressMonitor());
}
«ENDAROUND»