/*******************************************************************************
 * Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************/

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»

«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»

«/*
  *
  * Alow domain connections to have more than one participant
  *
  */»
«AROUND canCreate FOR gmfgen::GenLink»
	«IF getUniqueIdentifier().startsWith('ConnectionParticipant_')»
	
		«EXPAND xpt::Common::generatedMemberComment»
		private final String REASONING_SERVICE_ID = "de.uni_mannheim.informatik.swt.plm.reasoning.service";
		
		«EXPAND xpt::Common::generatedMemberComment»
		public boolean canCreate«getUniqueIdentifier()»(«EXPAND canCreateParameters FOR modelFacet») {
			
			//left out contains check to have multiple participants to the same clabject.
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor editor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) org.eclipse.ui.PlatformUI
					.getWorkbench().getActiveWorkbenchWindow().getActivePage()
					.getActiveEditor();

			if (editor.getPalette().getActiveTool().getId().startsWith("dsl.")) {

				de.uni_mannheim.informatik.swt.plm.workbench.interfaces.IReasoningService reasoner = null;
				
				try {
					reasoner = de.uni_mannheim.informatik.swt.plm.workbench.ExtensionPointService.Instance().getReasoningService(REASONING_SERVICE_ID);
				} catch (org.eclipse.core.runtime.CoreException e) {
					e.printStackTrace();
				}
				String typeID = editor.getPalette().getActiveTool().getId().replace("dsl.", "").replace(".CreationTool", "");
				de.uni_mannheim.informatik.swt.models.plm.PLM.Connection typeConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)reasoner.getElementByXMIID(typeID, source);
				//Start of drawing the line. possible if the source conforms what was used to construct the participation from
				if (source != null && target == null){
					return reasoner.neighbourhoodConstructionConformsConnection(typeConnection, source);
				}
				java.util.Set<de.uni_mannheim.informatik.swt.models.plm.PLM.Connection> possibleTypeConnections = new java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Connection>();
				possibleTypeConnections.add(typeConnection);
				for (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject con: typeConnection.getModelSupertypes())
					possibleTypeConnections.add((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection) con);
				java.util.Set<de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject> possibleTypes = new java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject>();
				for (de.uni_mannheim.informatik.swt.models.plm.PLM.Connection con: possibleTypeConnections)
					possibleTypes.addAll(con.getParticipant());
				for (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject possible: possibleTypes)
					if (reasoner.localConforms(possible, target))
						return true;
				return false;
			}
			
			return canExist«getUniqueIdentifier()»(«EXPAND canCreateValues FOR modelFacet»);
		}
	«ELSE»
		«targetDef.proceed()»
	«ENDIF»
«ENDAROUND»

// FIXME mark as private (_) and move to impl::<find proper place>::LinkConstraints.xpt
«DEFINE canCreateParameters FOR gmfgen::LinkModelFacet»«EXPAND sourceTargetParameters»«ENDDEFINE»// source and target are reasonable defaults
«DEFINE canCreateParameters FOR gmfgen::TypeLinkModelFacet»«IF hasContainerOtherThanSource(self)»«EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» container, «ENDIF»«EXPAND sourceTargetParameters»«ENDDEFINE»

«DEFINE sourceTargetParameters FOR gmfgen::LinkModelFacet»«EXPAND MetaModel::QualifiedClassName FOR getSourceType()» source, «EXPAND MetaModel::QualifiedClassName FOR getTargetType()» target«ENDDEFINE»

// these are in fact 'canExist' values
«DEFINE canCreateValues FOR gmfgen::LinkModelFacet»source, target«ENDDEFINE» // defaults
«DEFINE canCreateValues FOR gmfgen::TypeLinkModelFacet»«IF hasContainerOtherThanSource(self)»container, «ENDIF»null, source, target«ENDDEFINE»