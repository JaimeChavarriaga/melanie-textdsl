/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package uni_mannheim.informatik.swt.models.plm.PLM.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uni_mannheim.informatik.swt.models.plm.PLM.util.PLMAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PLMItemProviderAdapterFactory extends PLMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PLMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PElementItemProvider pElementItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPElementAdapter() {
		if (pElementItemProvider == null) {
			pElementItemProvider = new PElementItemProvider(this);
		}

		return pElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PLevelSpecificElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PLevelSpecificElementItemProvider pLevelSpecificElementItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PLevelSpecificElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPLevelSpecificElementAdapter() {
		if (pLevelSpecificElementItemProvider == null) {
			pLevelSpecificElementItemProvider = new PLevelSpecificElementItemProvider(this);
		}

		return pLevelSpecificElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PModuleItemProvider pModuleItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPModuleAdapter() {
		if (pModuleItemProvider == null) {
			pModuleItemProvider = new PModuleItemProvider(this);
		}

		return pModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PInstantiableElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PInstantiableElementItemProvider pInstantiableElementItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PInstantiableElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPInstantiableElementAdapter() {
		if (pInstantiableElementItemProvider == null) {
			pInstantiableElementItemProvider = new PInstantiableElementItemProvider(this);
		}

		return pInstantiableElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PPackageItemProvider pPackageItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPPackageAdapter() {
		if (pPackageItemProvider == null) {
			pPackageItemProvider = new PPackageItemProvider(this);
		}

		return pPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PConnectorItemProvider pConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPConnectorAdapter() {
		if (pConnectorItemProvider == null) {
			pConnectorItemProvider = new PConnectorItemProvider(this);
		}

		return pConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PFieldItemProvider pFieldItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPFieldAdapter() {
		if (pFieldItemProvider == null) {
			pFieldItemProvider = new PFieldItemProvider(this);
		}

		return pFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PClabject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PClabjectItemProvider pClabjectItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PClabject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPClabjectAdapter() {
		if (pClabjectItemProvider == null) {
			pClabjectItemProvider = new PClabjectItemProvider(this);
		}

		return pClabjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PMethodItemProvider pMethodItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPMethodAdapter() {
		if (pMethodItemProvider == null) {
			pMethodItemProvider = new PMethodItemProvider(this);
		}

		return pMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PNodeItemProvider pNodeItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPNodeAdapter() {
		if (pNodeItemProvider == null) {
			pNodeItemProvider = new PNodeItemProvider(this);
		}

		return pNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PRelationshipItemProvider pRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPRelationshipAdapter() {
		if (pRelationshipItemProvider == null) {
			pRelationshipItemProvider = new PRelationshipItemProvider(this);
		}

		return pRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PGeneralizationItemProvider pGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPGeneralizationAdapter() {
		if (pGeneralizationItemProvider == null) {
			pGeneralizationItemProvider = new PGeneralizationItemProvider(this);
		}

		return pGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PInstantiation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PInstantiationItemProvider pInstantiationItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PInstantiation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPInstantiationAdapter() {
		if (pInstantiationItemProvider == null) {
			pInstantiationItemProvider = new PInstantiationItemProvider(this);
		}

		return pInstantiationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link uni_mannheim.informatik.swt.models.plm.PLM.PanLevelModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PanLevelModelItemProvider panLevelModelItemProvider;

	/**
	 * This creates an adapter for a {@link uni_mannheim.informatik.swt.models.plm.PLM.PanLevelModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPanLevelModelAdapter() {
		if (panLevelModelItemProvider == null) {
			panLevelModelItemProvider = new PanLevelModelItemProvider(this);
		}

		return panLevelModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (pElementItemProvider != null) pElementItemProvider.dispose();
		if (pLevelSpecificElementItemProvider != null) pLevelSpecificElementItemProvider.dispose();
		if (pModuleItemProvider != null) pModuleItemProvider.dispose();
		if (pInstantiableElementItemProvider != null) pInstantiableElementItemProvider.dispose();
		if (pPackageItemProvider != null) pPackageItemProvider.dispose();
		if (pConnectorItemProvider != null) pConnectorItemProvider.dispose();
		if (pFieldItemProvider != null) pFieldItemProvider.dispose();
		if (pClabjectItemProvider != null) pClabjectItemProvider.dispose();
		if (pMethodItemProvider != null) pMethodItemProvider.dispose();
		if (pNodeItemProvider != null) pNodeItemProvider.dispose();
		if (pRelationshipItemProvider != null) pRelationshipItemProvider.dispose();
		if (pGeneralizationItemProvider != null) pGeneralizationItemProvider.dispose();
		if (pInstantiationItemProvider != null) pInstantiationItemProvider.dispose();
		if (panLevelModelItemProvider != null) panLevelModelItemProvider.dispose();
	}

}
