/*******************************************************************************
 * Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************/

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

//**************************************************************
//ADDITIONS
//handle notifictaion is overriden later in this transformation
//**************************************************************
«AROUND additions FOR gmfgen::GenLink»
//Sets the potency of instatiation ends
«IF self.editPartClassName = 'ClassificationEditPart'»
	«EXPAND updateSourcePotency-»
	«EXPAND handleNotificationEventForClassification-»
«ENDIF»
«IF self.editPartClassName = 'RoleEditPart'»
	«EXPAND addNotify-»
	«EXPAND updateViewRole-»
«ENDIF»	
«ENDAROUND»

«DEFINE handleNotificationEventForClassification FOR gmfgen::GenLink»
	/**
	 * updates the potency of the source element
	 *
	 * @generated
	 */
	 @Override
	 protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		//Source is set before target, so now we can set the potency of the source with the one of the target - 1
		if (((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName().equals(
				"target"))
		{
			updateSourcePotency();
			
		}
		else if (((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
				.equals("source")
				&& ((de.uni_mannheim.informatik.swt.models.plm.PLM.Classification) resolveSemanticElement()).getType() != null)
		{
			updateSourcePotency();
		}
	}
«ENDDEFINE»

«DEFINE updateSourcePotency FOR gmfgen::GenLink»
	/**
	 * updates the potency of the source element
	 *
	 * @generated
	 */
	public void updateSourcePotency() {
		de.uni_mannheim.informatik.swt.models.plm.PLM.Classification i = (de.uni_mannheim.informatik.swt.models.plm.PLM.Classification) resolveSemanticElement();

		int newPotency = 0;

		if (i.getType().getPotency() == -1)
			newPotency = -1;
		else if (i.getType().getPotency() > 0)
			newPotency = i.getType().getPotency() - 1;

		org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest request = new org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest(i.getInstance(),
				de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.eINSTANCE.getClabject_Potency(), newPotency);
		org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand command = new org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand(request);
		this.getViewer().getEditDomain().getCommandStack()
				.execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(command));
	}
«ENDDEFINE»

«DEFINE updateViewRole FOR gmfgen::GenLink»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
		
		updateView();
	}

	/**
	 * @generated
	 */
	public void updateView() {
	
		de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RoleEditPart.ConnectionRoleFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RoleEditPart.ConnectionRoleFigure)getFigure();
		connectionFigure.getChildren().retainAll(java.util.Arrays.asList(new Object[]{connectionFigure.getFigureConnectionRoleMultiplicityFigure(), connectionFigure.getFigureConnectionRoleNameFigure()}));
		
		for (org.eclipse.gef.editparts.AbstractEditPart part : (java.util.List<org.eclipse.gef.editparts.AbstractEditPart>)getChildren())
			part.refresh();
		
		if (getDSLRenderingValue())
			updateDSLRenderingView();
		else
			updateLMLRenderingView();
			
		//performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
	}
	
	/**
	 * @generated
	 */
	private void updateLMLRenderingView(){
		de.uni_mannheim.informatik.swt.models.plm.PLM.Role self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Role)resolveSemanticElement();
		
		//*****************************************************************
		//Is navigable
		//*****************************************************************
		if (self.isNavigable())
			((org.eclipse.draw2d.PolylineConnection)getFigure()).setTargetDecoration(new org.eclipse.draw2d.PolylineDecoration());
		else
			((org.eclipse.draw2d.PolylineConnection)getFigure()).setTargetDecoration(null);
	}
	
	/**
	 * @generated
	 */
	private void updateDSLRenderingView() {
		de.uni_mannheim.informatik.swt.models.plm.PLM.Role self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Role) resolveSemanticElement();
		
		//Do the DSL rendering -> Set decoration independent of isNavigable
		//Set labels independent of DSL rendering
		de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RoleEditPart.ConnectionRoleFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RoleEditPart.ConnectionRoleFigure)getFigure();
		connectionFigure.getFigureConnectionRoleNameFigure().setText("");
		connectionFigure.getFigureConnectionRoleMultiplicityFigure().setText("");

		de.uni_mannheim.informatik.swt.plm.workbench.interfaces.IVisualModelToFigureTransformator transformator = null;

		try {
			transformator = de.uni_mannheim.informatik.swt.plm.workbench.ExtensionPointService
					.Instance().getActiveVisualizationService();
		} catch (org.eclipse.core.runtime.CoreException e) {
			e.printStackTrace();
		}

		de.uni_mannheim.informatik.swt.models.plm.visualization.DSLVisualizer v = getConnectionDSLVisualizer(transformator);
		
		//We did not find any LMLVisualizer or the LMLVisualizer is not
		//containing link rendering information thus exit
		if (v == null || !(v.getContent().get(0) instanceof de.uni_mannheim.informatik.swt.models.plm.visualization.Link))
			return;
		
		de.uni_mannheim.informatik.swt.models.plm.visualization.Link l = (de.uni_mannheim.informatik.swt.models.plm.visualization.Link) v.getContent().get(0);

		connectionFigure.setForegroundColor(transformator.colorConstant2Color(l.getForegroundColor()));
		connectionFigure.setBackgroundColor(transformator.colorConstant2Color(l.getBackgroundColor()));

		//**********************************************
		//Add DSL Link decoration
		//**********************************************
		de.uni_mannheim.informatik.swt.models.plm.visualization.LinkDecoration decoDesc = l.getLinkDecorationForRole(self);

		//Neither decoration for role name found nor for the index
		if (decoDesc == null)
			connectionFigure.setTargetDecoration(null);
		else {
			//We have a special decoration
			if (((de.uni_mannheim.informatik.swt.models.plm.visualization.DefaultLinkDecoration) decoDesc)
					.getDecorationType() != de.uni_mannheim.informatik.swt.models.plm.visualization.DefaultLinkDecorationTypes.NO_LINE_DECORATION) {
				org.eclipse.draw2d.RotatableDecoration decoration = ((de.uni_mannheim.informatik.swt.models.plm.visualization.DefaultLinkDecoration) decoDesc)
						.getDecorationType() == de.uni_mannheim.informatik.swt.models.plm.visualization.DefaultLinkDecorationTypes.POLY_LINE_DECORATION ? new org.eclipse.draw2d.PolylineDecoration()
						: new org.eclipse.draw2d.PolygonDecoration();
				decoration.setBackgroundColor(transformator
						.colorConstant2Color(decoDesc
								.getBackgroundColor()));
				decoration.setForegroundColor(transformator
						.colorConstant2Color(decoDesc
								.getForegroundColor()));
				//set the decoration
				connectionFigure.setTargetDecoration(decoration);
			}
			//We have no special decoration
			else
				connectionFigure.setTargetDecoration(null);
		}

		//*********************************************
		//Add DSl label
		//*********************************************
		
		de.uni_mannheim.informatik.swt.models.plm.visualization.LabelDescriptor labelDesc = l.getLabelDescriptorForRole(self);
		if (! (labelDesc == null)){
		
			//Execute the OCL expression to get the value
			java.util.Set feature = null;
	
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.CONNECTION);
	
			try {
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("self.feature->select(f | f.oclIsKindOf(Attribute) and f.name = '"
								+ ((de.uni_mannheim.informatik.swt.models.plm.visualization.ExpressionLabel) l.getLabelDescriptorForRole(self)).getExpression() + "')");
				feature = (java.util.Set) ocl.evaluate(self.getConnection(),q);
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}

			if (! feature.isEmpty()){
				org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel label = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel(
						((de.uni_mannheim.informatik.swt.models.plm.PLM.Attribute) feature
								.iterator().next()).getValue());
				label.setParent(connectionFigure);
				connectionFigure.add(label, new org.eclipse.gmf.runtime.diagram.ui.figures.LabelLocator(connectionFigure, new org.eclipse.draw2d.geometry.Point(-10, -10),
						org.eclipse.draw2d.ConnectionLocator.SOURCE));
			}
		}
	}
	
	/**
	 * @generated
	 */
	public boolean getDSLRenderingValue()
	{
		de.uni_mannheim.informatik.swt.models.plm.PLM.Role self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Role) resolveSemanticElement();
		de.uni_mannheim.informatik.swt.models.plm.PLM.Connection c = (de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)self.eContainer();
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.LMLVisualizer r = c.getVisualizer().get(0);
		String dslRenderingString = r.getValueForKey("DSLRendering");

		if ("".equals(dslRenderingString))
			return false;

		return java.lang.Boolean.parseBoolean(dslRenderingString);
	}
	
	/**
	 * @generated
	 */
	private de.uni_mannheim.informatik.swt.models.plm.visualization.DSLVisualizer getConnectionDSLVisualizer(de.uni_mannheim.informatik.swt.plm.workbench.interfaces.IVisualModelToFigureTransformator transformator)
	{
		de.uni_mannheim.informatik.swt.models.plm.PLM.Connection containingConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)resolveSemanticElement().eContainer();
		
		return transformator.findDSLVisualizerForElement(containingConnection);
	}
«ENDDEFINE»

«DEFINE addNotify FOR gmfgen::GenLink»
	/**
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();

		updateView();
	}
«ENDDEFINE»