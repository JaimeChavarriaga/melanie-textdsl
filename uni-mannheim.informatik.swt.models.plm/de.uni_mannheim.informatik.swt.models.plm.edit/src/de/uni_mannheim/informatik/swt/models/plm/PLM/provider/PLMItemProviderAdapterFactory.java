/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.uni_mannheim.informatik.swt.models.plm.PLM.provider;

import de.uni_mannheim.informatik.swt.models.plm.PLM.util.PLMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PLMItemProviderAdapterFactory extends PLMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PLMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyItemProvider ontologyItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyAdapter() {
		if (ontologyItemProvider == null) {
			ontologyItemProvider = new OntologyItemProvider(this);
		}

		return ontologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.OwnedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OwnedElementItemProvider ownedElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.OwnedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOwnedElementAdapter() {
		if (ownedElementItemProvider == null) {
			ownedElementItemProvider = new OwnedElementItemProvider(this);
		}

		return ownedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.LogicalElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalElementItemProvider logicalElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.LogicalElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalElementAdapter() {
		if (logicalElementItemProvider == null) {
			logicalElementItemProvider = new LogicalElementItemProvider(this);
		}

		return logicalElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.PotentElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PotentElementItemProvider potentElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.PotentElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPotentElementAdapter() {
		if (potentElementItemProvider == null) {
			potentElementItemProvider = new PotentElementItemProvider(this);
		}

		return potentElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.SetRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetRelationshipItemProvider setRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.SetRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetRelationshipAdapter() {
		if (setRelationshipItemProvider == null) {
			setRelationshipItemProvider = new SetRelationshipItemProvider(this);
		}

		return setRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Generalization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralizationItemProvider generalizationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Generalization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralizationAdapter() {
		if (generalizationItemProvider == null) {
			generalizationItemProvider = new GeneralizationItemProvider(this);
		}

		return generalizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantiationItemProvider instantiationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantiationAdapter() {
		if (instantiationItemProvider == null) {
			instantiationItemProvider = new InstantiationItemProvider(this);
		}

		return instantiationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Complement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplementItemProvider complementItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Complement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplementAdapter() {
		if (complementItemProvider == null) {
			complementItemProvider = new ComplementItemProvider(this);
		}

		return complementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Equals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualsItemProvider equalsItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Equals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualsAdapter() {
		if (equalsItemProvider == null) {
			equalsItemProvider = new EqualsItemProvider(this);
		}

		return equalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Inversion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InversionItemProvider inversionItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Inversion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInversionAdapter() {
		if (inversionItemProvider == null) {
			inversionItemProvider = new InversionItemProvider(this);
		}

		return inversionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.BinaryGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryGeneralizationItemProvider binaryGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.BinaryGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryGeneralizationAdapter() {
		if (binaryGeneralizationItemProvider == null) {
			binaryGeneralizationItemProvider = new BinaryGeneralizationItemProvider(this);
		}

		return binaryGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.MultipleGeneralization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultipleGeneralizationItemProvider multipleGeneralizationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.MultipleGeneralization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultipleGeneralizationAdapter() {
		if (multipleGeneralizationItemProvider == null) {
			multipleGeneralizationItemProvider = new MultipleGeneralizationItemProvider(this);
		}

		return multipleGeneralizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.MultipleSpecialization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultipleSpecializationItemProvider multipleSpecializationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.MultipleSpecialization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultipleSpecializationAdapter() {
		if (multipleSpecializationItemProvider == null) {
			multipleSpecializationItemProvider = new MultipleSpecializationItemProvider(this);
		}

		return multipleSpecializationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClabjectItemProvider clabjectItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClabjectAdapter() {
		if (clabjectItemProvider == null) {
			clabjectItemProvider = new ClabjectItemProvider(this);
		}

		return clabjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.DomainEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainEntityItemProvider domainEntityItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.DomainEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainEntityAdapter() {
		if (domainEntityItemProvider == null) {
			domainEntityItemProvider = new DomainEntityItemProvider(this);
		}

		return domainEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainConnectionItemProvider domainConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainConnectionAdapter() {
		if (domainConnectionItemProvider == null) {
			domainConnectionItemProvider = new DomainConnectionItemProvider(this);
		}

		return domainConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Method} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodItemProvider methodItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.Method}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodAdapter() {
		if (methodItemProvider == null) {
			methodItemProvider = new MethodItemProvider(this);
		}

		return methodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_mannheim.informatik.swt.models.plm.PLM.OntologyLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyLevelItemProvider ontologyLevelItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_mannheim.informatik.swt.models.plm.PLM.OntologyLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyLevelAdapter() {
		if (ontologyLevelItemProvider == null) {
			ontologyLevelItemProvider = new OntologyLevelItemProvider(this);
		}

		return ontologyLevelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (ontologyItemProvider != null) ontologyItemProvider.dispose();
		if (ownedElementItemProvider != null) ownedElementItemProvider.dispose();
		if (logicalElementItemProvider != null) logicalElementItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (potentElementItemProvider != null) potentElementItemProvider.dispose();
		if (setRelationshipItemProvider != null) setRelationshipItemProvider.dispose();
		if (generalizationItemProvider != null) generalizationItemProvider.dispose();
		if (instantiationItemProvider != null) instantiationItemProvider.dispose();
		if (complementItemProvider != null) complementItemProvider.dispose();
		if (equalsItemProvider != null) equalsItemProvider.dispose();
		if (inversionItemProvider != null) inversionItemProvider.dispose();
		if (binaryGeneralizationItemProvider != null) binaryGeneralizationItemProvider.dispose();
		if (multipleGeneralizationItemProvider != null) multipleGeneralizationItemProvider.dispose();
		if (multipleSpecializationItemProvider != null) multipleSpecializationItemProvider.dispose();
		if (clabjectItemProvider != null) clabjectItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (domainEntityItemProvider != null) domainEntityItemProvider.dispose();
		if (domainConnectionItemProvider != null) domainConnectionItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (methodItemProvider != null) methodItemProvider.dispose();
		if (ontologyLevelItemProvider != null) ontologyLevelItemProvider.dispose();
	}

}
