«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

//**************************************************************
//ADDITIONS
//handle notifictaion is overriden later in this transformation
//**************************************************************
«AROUND additions FOR gmfgen::GenNode»
//Gives the option to diplay a DomainConnection/Generalization/Specialization as black rectangle
«IF self.editPartClassName = 'DomainConnectionEditPart' 
	or self.editPartClassName = 'BinaryGeneralizationEditPart' 
	or self.editPartClassName = 'MultipleSpecializationEditPart'
	or self.editPartClassName = 'MultipleGeneralizationEditPart'»
	
	«EXPAND toggleAttributes»
	«EXPAND toggle-»
	«EXPAND partActivate-»
«ENDIF»
//Responsible for the multiplicity, role, navigation ends
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND updateConnections-»
	«EXPAND refreshSourceConnections-»
«ENDIF»
«IF self.editPartClassName = 'RendererEditPart'»
	«EXPAND setRendererViewState»
«ENDIF»
«ENDAROUND»

//**************************************************************
//HANDLE NOTIFICATION
//**************************************************************
«AROUND handleNotificationEvent FOR gmfgen::GenNode-»
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND handleNotificationEventForDomainConnection-»
«ELSEIF self.editPartClassName = 'FieldEditPart'»
	«EXPAND handleNotificationEventForField-»
«ELSEIF self.editPartClassName = 'ModelEditPart'»
	«EXPAND handleNotificationEventForModel-»
«ELSEIF self.editPartClassName = 'OntologyEnditPart'»
	«EXPAND handleNotificationEventForOntology»
«ENDIF»
«ENDAROUND»

//**************************************************************
//DEFINITIONS
//**************************************************************
«DEFINE updateConnections FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private void updateConnections() {
		if (this.sourceConnections == null)
			return;

		java.util.List<DomainConnectionParticipantEditPart> sourceConnections = this.sourceConnections;
		de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection domainConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) org.eclipse.gmf.runtime.diagram.core.util.ViewUtil
				.resolveSemanticElement(this.getPrimaryView());

		for (int i = 0; i < sourceConnections.size(); i++) {

			//Take care that no renderer link is used here
			if (! (sourceConnections.get(i) instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart))
				continue;

			//****************************************************************************
			//Set navigable
			//****************************************************************************
			if (domainConnection.getIsNavigable().size() > i
					&& domainConnection.getIsNavigable().get(i) == true) {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(new org.eclipse.draw2d.PolylineDecoration());
			} else {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(null);
			}

			//****************************************************************************
			//Set role
			//****************************************************************************
			if (domainConnection.getRoleName().size() > i) {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText(domainConnection.getRoleName().get(i));
			} else {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText("");
			}

			//****************************************************************************
			//Set multiplicity
			//****************************************************************************
			//can we assume default lower = 0 and default upper = 1?
			int lower = 0, upper = 1;

			if (domainConnection.getLower().size() > i)
				lower = domainConnection.getLower().get(i);
			if (domainConnection.getUpper().size() > i)
				upper = domainConnection.getUpper().get(i);

			//now set the string
			String multiplicity = "";
			if (lower == 0 && upper == 1)
				;//Do nothing
			else if (upper > 0)
				multiplicity = lower + ".." + upper;
			else if (lower == 0 && upper == -1)
				multiplicity = "*";
			else if (upper == -1)
				multiplicity = lower + "..n";

			//get the label to set
			DomainConnectionParticipantEditPart connection = (DomainConnectionParticipantEditPart) sourceConnections
					.get(i);
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
					.getFigure();
			connectionFigure
					.getFigureDomainConnectionParticipantsMultiplicityFigure()
					.setText(multiplicity);
		}
	}
«ENDDEFINE»

«DEFINE refreshSourceConnections FOR gmfgen::GenNode»
	/**
	 * Updates the connections after one is added. Needed for setting up connection
	 * participants when diagram is loaded.
	 *
	 * @generated
	 */
	@Override
	protected void refreshSourceConnections() {
		super.refreshSourceConnections();
		
		if (this.sourceConnections != null)
			updateConnections();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForDomainConnection FOR gmfgen::GenNode»
	/**
	 * Updates the connections after a value was set.
	 *
	 * @generated
	 */
	 @Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) {
			updateConnections();
		}
	}
«ENDDEFINE»

«DEFINE toggle FOR gmfgen::GenNode»
/**
	 * This renders the DomainConnectionEditPart based on information
	 * in the model. Collapsed means that the DomainConnection is rendered as small 
	 * black rectangle. Collapsed means that the DomainConnection will rendered as
	 * hexagon, its default figure.
	 * 
	 * @generated
	 */
	public void toggle() {
		boolean collapse = false;

		//********************************************************
		//Find the renderer attached to this element 
		//********************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.Element self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Element) this.resolveSemanticElement();

		//No rendering information found => all DomainConnection remains expanded
		if (self.getRenderer() == null) {
			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure) figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure) boderItemContainer.getChildren().get(0))
					.setVisible(false);

			return;
		}

		//********************************************************
		//Do toggling based on information in the diagram
		//********************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.Field collapsedField = null;

		for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : self
				.getRenderer().getChildren()) {
			if (e instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field) {
				if (e.getName().equals("collapsed")) {
					collapse = java.lang.Boolean.parseBoolean(((de.uni_mannheim.informatik.swt.models.plm.PLM.Field) e)
									.getValue());
					break;
				}
			}
		}

		//the figure containing the actual design of the editpart
		//the outer parent is only a container for the border items
		//and the figure of the editpart
		org.eclipse.draw2d.IFigure fig = ((org.eclipse.draw2d.IFigure) figure.getChildren().get(0));
		
		//expand element
		if (!collapse) {
			//Element was not previously collapsed -> can happen at diagram load
			if (childrenCache == null)
			{
				//Hide external name label
				org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
				((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(false);
				
				return;
			}

			this.setBackgroundColor(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(
					org.eclipse.swt.SWT.COLOR_WHITE));

			fig.getChildren().clear();
			fig.getChildren().addAll(childrenCache);
			childrenCache = null;

			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(false);

			org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
			rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(70,
					60));
			org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
					this.getEditingDomain(), "change size", new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(
							(org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
			getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));

			return;
		}
		//collapse element
		else {
			//**************************************************
			//Create the new figure (Rectangle with black background)
			//**************************************************

			//figure.getClientArea() ==  null on startup
			org.eclipse.draw2d.geometry.Rectangle rect = (figure.getClientArea() != null) ? figure
					.getClientArea().getCopy() : null;
			childrenCache = (java.util.List) ((java.util.ArrayList) fig.getChildren()).clone();
			fig.getChildren().clear();

			org.eclipse.draw2d.RectangleFigure rf = new org.eclipse.draw2d.RectangleFigure();

			rf.setBackgroundColor(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(
					org.eclipse.swt.SWT.COLOR_BLACK));
			fig.getChildren().add(rf);
			rf.setParent(fig);

			//Show external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(true);

			//A client rectangle existed
			if (rect != null
					&& (rect.width != 0 && rect.height != 0 && rect.x != 0 && rect.y != 0)) {
				cachedSize = rect.getCopy().getSize();
				rect.setSize(8, 8);
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size",
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(
						new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
			}
			//A client rectangle does not exist -> called from activate
			else {
				rf.setSize(8, 8);
			}
		}
	}
«ENDDEFINE»

«DEFINE addNotify FOR gmfgen::GenNode»
	/**
	 * Needed to toogle DomainConnections on diagram load
	 *
	 * @generated NOT
	 */
	@Override
	public void addNotify() {
		// TODO Auto-generated method stub
		super.addNotify();
		
		toggle();
	}
«ENDDEFINE»	

«DEFINE toggleAttributes FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private java.util.List childrenCache = null;

	/**
	 * @generated
	 */
	private org.eclipse.draw2d.geometry.Dimension cachedSize = null;
«ENDDEFINE»

«DEFINE partActivate FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();
		
		toggle();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForField FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		//***********************************************************
		//Update DomainEntities on field change (for rendering)
		//***********************************************************
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field) {
			org.eclipse.emf.ecore.EObject field = (org.eclipse.emf.ecore.EObject) notification.getNotifier();
			org.eclipse.emf.ecore.EObject container = field.eContainer();

			//Only DomainEntyties are used to store rendering information
			if (container instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer) {
				//Get all DomainEntities that reference this DomainEntity as renderer
				java.util.Collection<org.eclipse.emf.ecore.EObject> rendererReferencere = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil
						.getReferencers(
								container,
								new org.eclipse.emf.ecore.EReference[] { de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.eINSTANCE
										.getElement_Renderer() });

				for (org.eclipse.emf.ecore.EObject obj : rendererReferencere) {
					org.eclipse.ui.IEditorPart editorPart = org.eclipse.ui.PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage()
							.getActiveEditor();
					//If no PLM Diagram is opened we want to do nothing
					if (!(editorPart instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
						return;
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) editorPart;
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainEntity2EditPart node =
						(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainEntity2EditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj), org.eclipse.gef.NodeEditPart.class).get(0);
					
					org.eclipse.gef.Request refreshRequest = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH);
					node.performRequest(refreshRequest);
				}
			}
		}
	}
«ENDDEFINE»


«DEFINE handleNotificationEventForModel FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) 
	{
		super.handleNotificationEvent(notification);
		
		if(notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
			&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("children"))
		{
			if (notification.getNewValue() != null)
			{
				de.uni_mannheim.informatik.swt.models.plm.PLM.Model m = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model)notification.getNotifier();
				
				if (notification.getNewValue() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)
				{
					de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject c = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)notification.getNewValue();
					de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)m.eContainer();
					c.setLevel(ont.getChildren().indexOf(m));
				}
			}
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model && 
				((EStructuralFeature)notification.getFeature()).getName().equals("showRenderer"))
		{
			org.eclipse.ui.IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
			if (! (editor instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
				return;
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor)editor;
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model)notification.getNotifier();

			org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iterator = ont.eAllContents();
			
			while(iterator.hasNext())
			{
				org.eclipse.emf.ecore.EObject obj = iterator.next();
				if (obj instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer)
				{
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart editPart = 
						(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(EMFCoreUtil.getProxyID(obj), de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart.class).get(0);
					editPart.setRendererViewState();
				}
			}
		}
	}
«ENDDEFINE»

«DEFINE setRendererViewState FOR gmfgen::GenNode»
	/**
	 * Sets the renderer visible depending on the ShowRenderer attribut of 
	 * all its containers.
	 * 
	 * @generated
	 */
	public void setRendererViewState()
	{
		boolean show = true;
		
		EObject obj = resolveSemanticElement();
		
		while ((obj = obj.eContainer()) != null)
		{
			if (obj instanceof RenderingContainer 
					&& ((RenderingContainer)obj).getShowRenderer().equals("ShowRenderingOptions::NONE"))
			{
				show = false;
				break;
			}
		}
		
		this.setVisibility(show);
	}
	
	/**
	 * Sets the view state on creation
	 * 
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();
		
		setRendererViewState();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForOntology FOR gmfgen::GenNode»
	/**
	 * Inform all renderers to set their view state
	 * 
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
		
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology && 
				((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("showRenderer"))
		{
			org.eclipse.ui.IEditorPart editor = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
			if (! (editor instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
				return;
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor)editor;
			de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)notification.getNotifier();

			org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iterator = ont.eAllContents();
			
			while(iterator.hasNext())
			{
				org.eclipse.emf.ecore.EObject obj = iterator.next();
				if (obj instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer)
				{
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart editPart = 
						(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj), de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RendererEditPart.class).get(0);
					editPart.setRendererViewState();
				}
			}
		}
	}
«ENDDEFINE»