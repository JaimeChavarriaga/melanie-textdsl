modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
	
transformation postRec(inout gmfgenModel : GMFGEN);

property genNavigator : GenNavigator = null;
property genStandardPrefencePage : GenStandardPreferencePage = null;
property genPlugIn : GenPlugin = null;
property genEditorGenerator : GenEditorGenerator = null;
property genDiagram: GenDiagram = null;
		
 
main() {
	
	--Set ListLayout for Model(Clabject) Compartment
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName = "OntologyModelCompartmentEditPart")->first()
				.listLayout := true;
	
	--Setup the GenEditorGenerator
	this.genEditorGenerator := gmfgenModel.objectsOfType(GenEditorGenerator)->asOrderedSet()->first();
	genEditorGenerator.sameFileForDiagramAndModel := true;
	genEditorGenerator.dynamicTemplates := true;
	genEditorGenerator.templateDirectory := "/de.uni_mannheim.informatik.swt.gmf.plm/templates";
	genEditorGenerator.diagramFileExtension := "lml";
	genEditorGenerator.modelID := "LML";
	
	--Setup the GenDiagram
	genDiagram
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->first();
	genDiagram.validationEnabled := true;
	genDiagram.validationDecorators := true;
	
	--Setup the GenPlugin
	this.genPlugIn := gmfgenModel.objectsOfType(GenPlugin)->asOrderedSet()->first();
	genPlugIn.provider := "University of Mannheim: Chair for Software Engineering";
	genPlugIn.name := "Level-agnostic Modelling Language (LML) Plugin";
	genPlugIn.printingEnabled := true;
	
	--Set the properties for the Prefrence Page (Window -> Preferences)
	this.genStandardPrefencePage := gmfgenModel.objectsOfType(GenStandardPreferencePage)->asOrderedSet()->first();
	genStandardPrefencePage.name := "LML Diagram Editor";
	
	--Build up the navigation structure
	this.genNavigator := gmfgenModel.objectsOfType(GenNavigator)->asOrderedSet()->first();

	--Clear all child entries
	this.genNavigator.childReferences := OrderedSet{};

	--Root group for the LMLModel container
	var LMLModelChildReference 
		:= new GenNavigatorChildReference();
	LMLModelChildReference.child 
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	
	--Group for all DomainEntities that contain Ontology rendering information
	--var rootDomainEnitiyChildReference 
	--	:= xmap createChildReference("DomainEntityEditPart", "LMLModelEditPart", "Domain Entities",  "icons/clabject16.gif");
	--rootDomainEnitiyChildReference.parent 
	--	:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	--Fields for DomainEntities that describe rendering of ontologies
	--var rootFieldChildReference 
	--	:= xmap createChildReference("FieldEditPart", "DomainEntityEditPart", "Fields", "icons/field16.gif");
	--Methods for DomainEntities that describe rendering of ontologies
	--var rootMethodChildReference 
	--	:= xmap createChildReference("MethodEditPart", "DomainEntityEditPart", "Methods", "icons/method16.gif");
	
	--Group for all Ontologies
	var ontologyChildReference 
		:= xmap createChildReference("OntologyEditPart", "LMLModelEditPart", "Ontologies", "icons/ontology16.gif");
	ontologyChildReference.parent 
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	--Group for all Models
	var modelChildReference 
		:= xmap createChildReference("ModelEditPart", "OntologyEditPart", "Models", "icons/model16.gif");
	
	--Group for all DomainEntities
	var domainEntityChildReference 
		:= xmap createChildReference("DomainEntityEditPart", "ModelEditPart", "Domain Entities", "icons/clabject16.gif");
		--Fields for DomainEntities that describe rendering of ontologies
	var fieldChildReference 
		:= xmap createChildReference("FieldEditPart", "DomainEntityEditPart", "Fields", "icons/field16.gif");
	--Methods for DomainEntities that describe rendering of ontologies
	var methodChildReference 
		:= xmap createChildReference("MethodEditPart", "DomainEntityEditPart", "Methods", "icons/method16.gif");
	
	--Group for all DomainConnections
	var domainConnectionChildReference 
		:= xmap createChildReference("DomainConnectionEditPart", "ModelEditPart", "Domain Entities", "icons/domainConnection16.gif");
	--Group for all Generalizations
	var multipleGeneralizationChildReference 
		:= xmap createChildReference("MultipleGeneralizationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
	--Group for all Generalzsations
	var multipleSpecializationChildReference 
		:= xmap createChildReference("MultipleSpecializationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
		--Group for all Generalizations
	var binaryGeneralizationChildReference 
		:= xmap createChildReference("BinaryGeneralizationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
	--Group for all SetRelationships
	var complementChildReference 
		:= xmap createChildReference("ComplementEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all SetRelationships
	var equalChildReference 
		:= xmap createChildReference("EqualityEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all SetRelationships
	var inversionChildReference 
		:= xmap createChildReference("InversionEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	
	this.genNavigator.childReferences += 
		OrderedSet{LMLModelChildReference, --rootDomainEnitiyChildReference, rootFieldChildReference, rootMethodChildReference,
					 ontologyChildReference, modelChildReference,
					domainEntityChildReference, domainConnectionChildReference, 
					fieldChildReference, methodChildReference, binaryGeneralizationChildReference,
					multipleGeneralizationChildReference, multipleSpecializationChildReference, 
					complementChildReference, equalChildReference, inversionChildReference};
	
	--fix BUG 331875
	gmfgenModel.objectsOfType(ExpressionLabelParser)->forEach(parser)
	{
		parser.className := parser.className.concat(parser._uses->first().container().oclAsType(GenNodeLabel).visualID.toString());
	};
	 
}

mapping createChildReference(childEditPartName:String, parentEditPartName:String, groupName:String, icon:String): GenNavigatorChildReference
{
	result.child := gmfgenModel.objectsOfType(GenNode)->asOrderedSet()->select(n | n.editPartClassName = childEditPartName)->first();
	result.parent := gmfgenModel.objectsOfType(GenNode)->asOrderedSet()->select(n | n.editPartClassName = parentEditPartName)->first();
	result.hideIfEmpty := false;
	result.groupName := groupName;
	result.groupIcon := icon;
}