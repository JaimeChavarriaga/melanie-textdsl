«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«AROUND additions FOR gmfgen::GenNode»
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND toggleAttributes»
	«EXPAND updateConnections-»
	«EXPAND refreshSourceConnections-»
	«EXPAND toggle-»
	«EXPAND partActivate-»
«ENDIF»
«ENDAROUND»

«AROUND handleNotificationEvent FOR gmfgen::GenNode-»
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND handleNotificationEventForDomainConnection-»
«ELSEIF self.editPartClassName = 'FieldEditPart'»
	«EXPAND handleNotificationEventForField»
«ENDIF»
«ENDAROUND»

«DEFINE updateConnections FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private void updateConnections() {
		if (this.sourceConnections == null)
			return;

		java.util.List<DomainConnectionParticipantEditPart> sourceConnections = this.sourceConnections;
		de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection domainConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) org.eclipse.gmf.runtime.diagram.core.util.ViewUtil
				.resolveSemanticElement(this.getPrimaryView());

		for (int i = 0; i < sourceConnections.size(); i++) {

			//****************************************************************************
			//Set navigable
			//****************************************************************************
			if (domainConnection.getIsNavigable().size() > i
					&& domainConnection.getIsNavigable().get(i) == true) {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(new org.eclipse.draw2d.PolylineDecoration());
			} else {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(null);
			}

			//****************************************************************************
			//Set role
			//****************************************************************************
			if (domainConnection.getRoleName().size() > i) {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText(domainConnection.getRoleName().get(i));
			} else {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText("");
			}

			//****************************************************************************
			//Set multiplicity
			//****************************************************************************
			//can we assume default lower = 0 and default upper = 1?
			int lower = 0, upper = 1;

			if (domainConnection.getLower().size() > i)
				lower = domainConnection.getLower().get(i);
			if (domainConnection.getUpper().size() > i)
				upper = domainConnection.getUpper().get(i);

			//now set the string
			String multiplicity = "";
			if (lower == 0 && upper == 1)
				;//Do nothing
			else if (upper > 0)
				multiplicity = lower + ".." + upper;
			else if (lower == 0 && upper == -1)
				multiplicity = "*";
			else if (upper == -1)
				multiplicity = lower + "..n";

			//get the label to set
			DomainConnectionParticipantEditPart connection = (DomainConnectionParticipantEditPart) sourceConnections
					.get(i);
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
					.getFigure();
			connectionFigure
					.getFigureDomainConnectionParticipantsMultiplicityFigure()
					.setText(multiplicity);
		}
	}
«ENDDEFINE»

«DEFINE refreshSourceConnections FOR gmfgen::GenNode»
	/**
	 * Updates the connections after one is added. Needed for setting up connection
	 * participants when diagram is loaded.
	 *
	 * @generated
	 */
	@Override
	protected void refreshSourceConnections() {
		super.refreshSourceConnections();
		
		if (this.sourceConnections != null)
			updateConnections();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForDomainConnection FOR gmfgen::GenNode»
	/**
	 * Updates the connections after a value was set.
	 *
	 * @generated
	 */
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) {
			updateConnections();
		}
	}
«ENDDEFINE»

«DEFINE toggle FOR gmfgen::GenNode»
/**
	 * This renders the DomainConnectionEditPart based on information
	 * in the model. Collapsed means that the DomainConnection is rendered as small 
	 * black rectangle. Collapsed means that the DomainConnection will rendered as
	 * hexagon, its default figure.
	 * 
	 * @generated
	 */
	public void toggle() {
		boolean collapse = false;

		//********************************************************
		//Get the base Ontology as the rendering information for
		//DomainConnections is connected to it
		//********************************************************
		org.eclipse.emf.ecore.EObject obj = (org.eclipse.emf.ecore.EObject) this.resolveSemanticElement();
		de.uni_mannheim.informatik.swt.models.plm.PLM.LMLModel root = (de.uni_mannheim.informatik.swt.models.plm.PLM.LMLModel) org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer(obj);
		de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology) org.eclipse.emf.ecore.util.EcoreUtil.getObjectByType(root.getElements(),
				de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.eINSTANCE.getEClassifier("Ontology"));

		//No rendering information found => all DomainConnections remain expanded
		if (ont.getRenderer() == null)
			return;

		//********************************************************
		//Do toggling based on information in the diagram
		//********************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.Field collapsedDomainConnectionsField = null;

		for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : ont
				.getRenderer().getChildren()) {
			if (e instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field)
			{
				if (e.getName().equals("collapsedDomainConnections"))
				{
					collapsedDomainConnectionsField = (de.uni_mannheim.informatik.swt.models.plm.PLM.Field)e;
					break;
				}
			}
		}

		//get a array with all collapsed ids
		String value = collapsedDomainConnectionsField.getValue();
		String[] collapsedConnections = value.replace("Sequence{", "")
				.replace("}", "").trim().split(";");

		for (String s : collapsedConnections) {
			if (s.trim().replace(";", "").equals(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj))) {
				collapse = true;
				break;
			}
		}

		//the figure containing the actual design of the editpart
		//the outer parent is only a container for the border items
		//and the figure of the editpart
		org.eclipse.draw2d.IFigure fig = ((org.eclipse.draw2d.IFigure)figure.getChildren().get(0));

		//expand element
		if (!collapse) {
			//Element was not previously collapsed -> can happen at diagram load
			if (childrenCache == null)
			{
				//Hide external name label
				org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
				((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(false);
				
				return;
			}

			this.setBackgroundColor(Display.getDefault().getSystemColor(
					SWT.COLOR_WHITE));

			fig.getChildren().clear();
			fig.getChildren().addAll(childrenCache);
			childrenCache = null;

			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(false);

			org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
			rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(70,
					60));
			org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
					this.getEditingDomain(), "change size", new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(
							(org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
			getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));

			return;
		}
		//collapse element
		else {
			//**************************************************
			//Create the new figure (Rectangle with black background)
			//**************************************************

			//figure.getClientArea() ==  null on startup
			org.eclipse.draw2d.geometry.Rectangle rect = (figure.getClientArea() != null) ? figure
					.getClientArea().getCopy() : null;
			childrenCache = (java.util.List) ((java.util.ArrayList) fig.getChildren()).clone();
			fig.getChildren().clear();

			org.eclipse.draw2d.RectangleFigure rf = new org.eclipse.draw2d.RectangleFigure();

			rf.setBackgroundColor(Display.getDefault().getSystemColor(
					SWT.COLOR_BLACK));
			fig.getChildren().add(rf);
			rf.setParent(fig);

			//Show external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure)boderItemContainer.getChildren().get(0)).setVisible(true);

			//A client rectangle existed
			if (rect != null
					&& (rect.width != 0 && rect.height != 0 && rect.x != 0 && rect.y != 0)) {
				cachedSize = rect.getCopy().getSize();
				rect.setSize(10, 10);
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size",
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(
						new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
			}
			//A client rectangle does not exist -> called from activate
			else {
				rf.setSize(10, 10);
			}
		}
	}
«ENDDEFINE»

«DEFINE addNotify FOR gmfgen::GenNode»
	/**
	 * Needed to toogle DomainConnections on diagram load
	 *
	 * @generated NOT
	 */
	@Override
	public void addNotify() {
		// TODO Auto-generated method stub
		super.addNotify();
		
		toggle();
	}
«ENDDEFINE»	

«DEFINE toggleAttributes FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private java.util.List childrenCache = null;

	/**
	 * @generated
	 */
	private org.eclipse.draw2d.geometry.Dimension cachedSize = null;
«ENDDEFINE»

«DEFINE partActivate FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();
		
		toggle();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForField FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		//***********************************************************
		//Update DomainEntities on field change (for rendering)
		//***********************************************************
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field)
		{
			org.eclipse.emf.ecore.EObject field = (org.eclipse.emf.ecore.EObject)notification.getNotifier();
			org.eclipse.emf.ecore.EObject container = field.eContainer();
			
			//Only DomainEntyties are used to store rendering information
			if (container instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.DomainEntity)
			{
				//Get all DomainEntities that reference this DomainEntity as renderer
				java.util.Collection<org.eclipse.emf.ecore.EObject> rendererReferencere =
					org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getReferencers(container, new org.eclipse.emf.ecore.EReference[] {de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.eINSTANCE.getElement_Renderer()});
				
				for(org.eclipse.emf.ecore.EObject obj : rendererReferencere)
				{
					org.eclipse.ui.IEditorPart editorPart = org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
					//If no PLM Diagram is opened we want to do nothing
					if (! (editorPart instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
						return;
					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor)editorPart;
					//DomainEntity2EditPart node =
					//	(de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainEntity2EditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj), org.eclipse.gef.NodeEditPart.class).get(0);
					
					//((DomainEntityFigure)node.getFigure().getChildren().get(0)).getFigureDomainEntityAVSFigure().getUpdateManager().;
				}
			}
		}
	}
«ENDDEFINE»