-- @nsURI MOF=http://www.eclipse.org/emf/2002/Ecore
-- @path plmMM=/de.uni_mannheim.informatik.swt.models.plm/model/PLM.ecore
-- @path plm=/de.uni_mannheim.informatik.swt.models.plm/model/PLM.ecore

--******************************************************************************
--* Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
--* All rights reserved. This program and the accompanying materials
--* are made available under the terms of the Eclipse Public License v1.0
--* which accompanies this distribution, and is available at
--* http://www.eclipse.org/legal/epl-v10.html
--*
--* Contributors:
--*    Ralph Gerbig - initial API and implementation and initial documentation
--*******************************************************************************/

--Regular VM

module m2mmm;


--No refinment transformation as there are not called rules supported at the 
--time of writing
create OUT:plm from PLM_MM:plmMM, IN:MOF;

---The ontology
helper def : ontology : plm!Ontology = OclUndefined;
---The meta-model model
helper def : o_1 : plm!Model = OclUndefined;
---The model model
helper def : o_2 : plm!Model = OclUndefined;

---Returns the Visualizer attributes that are not trait specific
helper context plm!Element def : getAdditionalVizualizationAttributes : Sequence(String) = 
	if (self.oclIsKindOf(plm!Connection)) then
		Sequence{'collapsed= false', 'ProximityInstantiation= 1', 'DSLRendering= true'}
	else
		if (self.oclIsKindOf(plm!Entity)) then
			Sequence{'ProximityInstantiation= 1', 'DSLRendering= true'}
		else
			if(self.oclIsKindOf(plm!Generalization))then
				Sequence{'collapsed= false'}
			else
				Sequence{''}
			endif
		endif
	endif;

---Finds the type at O1 according to the eClass of the eObject
helper  def : findType(type:MOF!EObject):plm!Clabject = 
	let typeName:String =
		type.eClass().name
	in
		thisModule.o_1.content->select(c | c.name = typeName)->first();
			
rule Visualizer2Visualizer {
	from
		s : plmMM!Visualizer
	to 
		t : plm!Visualizer (
			attributes <- s.attributes,
			child <- s.child,
			durability <- s.durability,
			template <- s.template
		)
}

rule LMLModel2LMLModel {
	from
		s : plmMM!LMLModel
	to 
		t : plm!LMLModel (
			elements <- s.elements,
			name <- s.name
		)
}

rule Ontology2Ontology {
	from
		s : plmMM!Ontology
	to 
		t : plm!Ontology (
			completness <- s.completness,
			content <- s.content,
			expressed <- s.expressed,
			name <- s.name,
			origin <- s.origin,
			relevant <- s.relevant,
			visualizer <- s.visualizer,
			visualizersShown <- s.visualizersShown
		)
	do {
		thisModule.ontology <- self;
		
		thisModule.o_2 <- thisModule.createO_2();
		t.content <- t.content->append(thisModule.o_2);
	}
}

rule Model2Model {
	from
		s : plmMM!Model
	to 
		t : plm!Model (
			completness <- s.completness,
			content <- s.content,
			expressed <- s.expressed,
			name <- s.name,
			origin <- s.origin,
			relevant <- s.relevant,
			visualizer <- s.visualizer,
			visualizersShown <- s.visualizersShown
		)
		do {
			if (t.name = 'O1') {
				thisModule.o_1 <- t;
			}
		}
}


rule Connection2Connection {
	from
		s : plmMM!Connection
	to 
		t : plm!Connection (
			blueprint <- s.blueprint,
			content <- s.content,
			elided <- s.elided,
			expressed <- s.expressed,
			feature <- s.feature,
			instantiable <- s.instantiable,
			isNavigable <- s.isNavigable,
			level <- s.level,
			lower <- s.lower,
			name <- s.name,
			origin <- s.origin,
			participant <- s.participant,
			potency <- s.potency,
			relevant <- s.relevant,
			roleName <- s.roleName,
			transitive <- s.transitive,
			upper <- s.upper,
			visualizer <- s.visualizer,
			visualizersShown <- s.visualizersShown
		)
}

rule Entity2Entity {
	from
		s : plmMM!Entity
	to 
		t : plm!Entity (
			blueprint <- s.blueprint,
			content <- s.content,
			elided <- s.elided,
			expressed <- s.expressed,
			feature <- s.feature,
			instantiable <- s.instantiable,
			level <- s.level,
			name <- s.name,
			origin <- s.origin,
			potency <- s.potency,
			relevant <- s.relevant,
			visualizer <- s.visualizer,
			visualizersShown <- s.visualizersShown
		)
}

rule BinaryGeneralization2BinaryGeneralization {
	from
		s : plmMM!BinaryGeneralization
	to 
		t : plm!BinaryGeneralization (
			discriminant <- s.discriminant,
			expressed <- s.expressed,
			name <- s.name,
			relevant <- s.relevant,
			subtype <- s.subtype,
			supertype <- s.supertype,
			visualizer <- s.visualizer
		)
}

rule MultipleGeneralization2MultipleGeneralization {
	from
		s : plmMM!MultipleGeneralization
	to 
		t : plm!MultipleGeneralization (
			discriminant <- s.discriminant,
			expressed <- s.expressed,
			name <- s.name,
			relevant <- s.relevant,
			subtype <- s.subtype,
			supertype <- s.supertype,
			visualizer <- s.visualizer
		)
}

rule MultipleSpecialization2MultipleSpecialization {
	from
		s : plmMM!MultipleSpecialization
	to 
		t : plm!MultipleSpecialization (
			discriminant <- s.discriminant,
			expressed <- s.expressed,
			name <- s.name,
			relevant <- s.relevant,
			subtype <- s.subtype,
			supertype <- s.supertype,
			visualizer <- s.visualizer
		)
}

rule Equality2Equality {
	from
		s : plmMM!Equality
	to 
		t : plm!Equality (
			base <- s.base,
			equal <- s.equal,
			expressed <- s.expressed,
			name <- s.name,
			relevant <- s.relevant,
			visualizer <- s.visualizer
		)
}

rule Inversion2Inversion {
	from
		s : plmMM!Inversion
	to 
		t : plm!Inversion (
			base <- s.base,
			expressed <- s.expressed,
			inverse <- s.inverse,
			name <- s.name,
			relevant <- s.relevant,
			visualizer <- s.visualizer
		)
}

rule Complement2Complement {
	from
		s : plmMM!Complement
	to 
		t : plm!Complement (
			base <- s.base,
			complement <- s.complement,
			expressed <- s.expressed,
			name <- s.name,
			relevant <- s.relevant,
			visualizer <- s.visualizer
		)
}

rule Instantiation2Instantiation {
	from
		s : plmMM!Instantiation
	to 
		t : plm!Instantiation (
			expressed <- s.expressed,
			instance <- s.instance,
			isonym <- s.isonym,
			name <- s.name,
			relevant <- s.relevant,
			type <- s.type,
			visualizer <- s.visualizer
		)
}

rule Attribute2Attribute {
	from
		s : plmMM!Attribute
	to 
		t : plm!Attribute (
			datatype <- s.datatype,
			durability <- s.durability,
			elided <- s.elided,
			expressed <- s.expressed,
			mutability <- s.mutability,
			name <- s.name,
			relevant <- s.relevant,
			value <- s.value,
			visualizer <- s.visualizer
		)
}

rule Method2Method {
	from
		s : plmMM!Method
	to 
		t : plm!Method (
			body <- s.body,
			durability <- s.durability,
			elided <- s.elided,
			expressed <- s.expressed,
			input <- s.input,
			name <- s.name,
			output <- s.output,
			relevant <- s.relevant,
			visualizer <- s.visualizer
		)
}

rule EObject2Entity {
	from
		s : MOF!EObject
	to 
		t : plm!Entity (
			name <- s.refGetValue('name'),
			potency <- 0,
			level <- 2,
			feature <- s.eClass().eAllAttributes->collect(a | thisModule.LazyEAttribute2Attribute(a, s))
						->append(s.eClass().eAllOperations->collect(o | thisModule.LazyEOperation2Method(o)))
		)
		do {
			thisModule.o_2.content <- thisModule.o_2.content->append(thisModule.createInstantiationFromO2ToO1(t, s));
			thisModule.o_2.content <- thisModule.o_2.content->append(t);
			
			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
			
			s.eCrossReferences()->collect(r | thisModule.LazyEReference2Connection(r, t));
		}
}

---s - The reference
---eObject - the source of the reference
unique lazy rule LazyEReference2Connection{
	from
		s:MOF!EObject,
		eObject:MOF!EObject
	to
		t:plm!Connection(
			name <- '',
			participant <- Sequence{eObject, s.debug('ref')}->flatten(), 
			potency <- 0,
			level <- 2,
			isNavigable <- Sequence{false, true},
			lower <- Sequence{1, 1},
			upper <- Sequence{1, 1},
			roleName <- Sequence{'',''}
		)
		do{
			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
			--thisModule.createInstantiationFromO1ToO0(t, thisModule.romConnection);
			thisModule.o_2.content <- thisModule.o_2.content->append(t);
		}
}

lazy rule LazyEAttribute2Attribute{
	from
		s:MOF!EAttribute,
		eObject:MOF!EObject
	to
		t:plm!Attribute(
			name <- s.name,
			durability <- 0,
			mutability <- 0,
			value <- eObject.refGetValue(s.name).toString()--,
			--datatype <- if (not s.eType.oclIsKindOf(plm!Entity)) then
			--									thisModule.LazyEClass2Clabject(s.eType)
			--							else
			--									s.eType
			--							endif
		)
	do{
		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
	}
}

lazy rule LazyEOperation2Method{
	from
		s:MOF!EOperation
	to
		t:plm!Method(
			name <- s.name,
			durability <- 1--,
--			input <- s.eParameters->collect(p | if (not p.oclIsKindOf(plm!Entity)) then
--												thisModule.LazyEClass2Clabject(p.eType)
--										else
--												p
--										endif)
		)
	do{
		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
	}
}

---Creates the model for the meta-model
rule createO_2() {
	to 
		t : plm!Model(
			name <- 'O2'
		)
	do{
		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
		
		t;
	}
}

---Creates a visualizer
rule createVisualizer(element:plm!Element)
{
	using {
		eObject:MOF!EObject = element;
	}
	to
		t:plm!Visualizer(
			durability <- 0,
			--Go through all traits + add custom pairs
			attributes <- eObject.eClass().eAllAttributes->collect(a | a.name.concat('= default'))->union(element.getAdditionalVizualizationAttributes)
		)
	do{
		t;
	}
}

---Create an instantiation from O2 to O1
---instance = instance
---type = type
unique lazy rule createInstantiationFromO2ToO1{
	from
		instance : plm!Clabject,
		type : MOF!EObject
	to
		t:plm!Instantiation(
			instance <- instance,
			type <- thisModule.findType(type)
		)
	do
	{
		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
		
		t;
	}
}

---The ROM
--helper def : o_0 : plm!Model = OclUndefined;

--
--helper def : romThing : plm!Entity = OclUndefined;
--helper def : romConnection : plm!Connection = OclUndefined;


--Sets up the model infrastructure before all other rules are executed
--entrypoint rule entry(){
--	using {
--		--Stores the thing from the ROM
--		ROMThing : plm!Entity = OclUndefined;
--		--Contains all EClasses that get matched by the matched rules -> Not in referenced model
--	}
--	to
--		t:plm!LMLModel
--	do{
--		--Copy the complete model to the new model
--		plmMM!Element.allInstancesFrom('PLM_MM');
--		
--		--Create Ontology
----		t.name <- MOF!EPackage.allInstancesFrom('MOF')->first().name;
----		t.elements <- t.elements->including(thisModule.createOntology());
--		
--		--Create ROM and meta-model model
----		thisModule.ontology.content <- thisModule.ontology.content->append(thisModule.createO_0());
----		thisModule.ontology.content <- thisModule.ontology.content->append(thisModule.createO_1());
--		
--		--Fill ROM
----		ROMThing <- thisModule.createROMEntity('Thing');
----		thisModule.o_0.content <- thisModule.o_0.content->append(ROMThing)->append(thisModule.createROMConnection('Connection', ROMThing));
----		thisModule.romConnection;
--		
--		--Don't know why this is only returning the referenced EClasses -> It should return all EClasses..
----		MOF!EClass.allInstancesFrom('IN')->select(eClass | not eClass.oclIsUndefined())->collect(eClass | thisModule.LazyEClass2Clabject(eClass));
--	}
--}

--unique lazy rule LazyEClass2Clabject{
--	from
--		s:MOF!EClass
--	to
--		t:plm!Entity(
--			name <- s.name,
--			feature <-
--					--This can happen when called for parameter creation of methods
--					if (not s.oclIsKindOf(MOF!EDataType)) then
--						--Already plm mm elemet -> use it -> otherwise create one
--						s.eAllAttributes->collect(a | if (not a.oclIsKindOf(plm!Attribute)) then
--												thisModule.LazyEAttribute2Attribute(a)
--										else
--												a
--										endif)->append(
--										s.eAllOperations->collect(o | if (not o.oclIsKindOf(plm!Method)) then
--												thisModule.LazyEOperation2Method(o)
--										else
--												o
--										endif))
--						else
--							Sequence{}
--						endif,
--			potency <- 1,
--			level <- 0
--		)
--		do{
--			--This can happen when called for parameter creation of methods
--			if (not s.oclIsKindOf(MOF!EDataType)){
--				--Build the inheritance hierarchy
--				if (s.eSuperTypes.size() = 1){
--					thisModule.createBinaryGeneralization(t, s.eSuperTypes->first());
--				}
--				if (s.eSuperTypes.size() > 1){
--					thisModule.createMultipleGeneralization(t, s.eSuperTypes);
--				}
--			}
--			
--			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--			
--			thisModule.o_1.content <- thisModule.o_1.content->append(t);
--			thisModule.createInstantiationFromO1ToO0(t, thisModule.romThing);
--			
--			--This can happen when called for parameter creation of methods
--			if (not s.oclIsKindOf(MOF!EDataType)){
--				s.eAllReferences->collect(s | thisModule.LazyEReference2Connection(s));
--			}
--			
--			t;
--		}
--}
--
--unique lazy rule LazyEReference2Connection{
--	from
--		s:MOF!EReference
--	to
--		t:plm!Connection(
--			name <- s.name,
--			participant <- Sequence{if (not s.eContainingClass.oclIsKindOf(plm!Entity)) then
--												thisModule.LazyEClass2Clabject(s.eContainingClass)
--										else
--												s.eContainingClass
--										endif, 
--										if (not s.eReferenceType.oclIsKindOf(plm!Entity)) then
--												thisModule.LazyEClass2Clabject(s.eReferenceType)
--										else
--												s.eReferenceType
--										endif},
--			potency <- 1,
--			level <- 0,
--			isNavigable <- Sequence{false, true},
--			lower <- Sequence{1, s.lowerBound},
--			upper <- Sequence{-1, s.upperBound},
--			roleName <- Sequence{'',''}
--		)
--		do{
--			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--			thisModule.createInstantiationFromO1ToO0(t, thisModule.romConnection);
--			thisModule.o_1.content <- thisModule.o_1.content->append(t);
--		}
--}
--
--unique lazy rule LazyEAttribute2Attribute{
--	from
--		s:MOF!EAttribute
--	to
--		t:plm!Attribute(
--			name <- s.name,
--			durability <- 1,
--			mutability <- 1,
--			datatype <- if (not s.eType.oclIsKindOf(plm!Entity)) then
--												thisModule.LazyEClass2Clabject(s.eType)
--										else
--												s.eType
--										endif
--		)
--	do{
--		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--	}
--}
--
--unique lazy rule LazyEOperation2Method{
--	from
--		s:MOF!EOperation
--	to
--		t:plm!Method(
--			name <- s.name,
--			durability <- 1,
--			input <- s.eParameters->collect(p | if (not p.oclIsKindOf(plm!Entity)) then
--												thisModule.LazyEClass2Clabject(p.eType)
--										else
--												p
--										endif)
--		)
--	do{
--		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--	}
--}
--
--rule createOntology() {
--	to 
--		t : plm!Ontology(
--			name <- MOF!EPackage.allInstancesFrom('MOF')->first().name
--		)
--	do{
--		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--		
--		thisModule.ontology <- t;
--		t;
--	}
--}
--
-----Creates a Connection for the ROM 
-----name = name
--rule createROMEntity(name : String){
--	to
--		t : plm!Entity(
--			name <- name
--		)
--		do{
--			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--			
--			thisModule.romThing <- t;
--			t;
--		}
--}
--
-----Creates a Connection for the ROM 
-----name = name
-----participant = participant
--rule createROMConnection(name : String, participant : plm!Entity){
--	to
--		t : plm!Connection(
--			name <- name,
--			participant <- Sequence{participant, participant},
--			lower <- Sequence{0,0},
--			upper <- Sequence{-1,-1},
--			isNavigable <- Sequence{false, false},
--			roleName <- Sequence{'',''}
--		)
--		do{
--			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--			
--			thisModule.romConnection <- t;
--			t;
--		}
--}
--
-----Creates the ROM
--rule createO_0() {
--	to 
--		t : plm!Model(
--			name <- 'O0'
--		)
--	do{
--		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--		
--		thisModule.o_0 <- t;
--		t;
--	}
--}
--

--
-----Creates a BinaryGeneralization
-----sub = subtype
-----sup = supertype
--unique lazy rule createBinaryGeneralization{
--	from
--		sub:MOF!EClass, 
--		sup:MOF!EClass
--	to
--		t:plm!BinaryGeneralization(
--			subtype <- if (not sub.oclIsKindOf(plm!Entity)) then
--							thisModule.LazyEClass2Clabject(sub)
--						else
--							sub
--						endif,
--			supertype <- if (not sup.oclIsKindOf(plm!Entity)) then
--							thisModule.LazyEClass2Clabject(sup)
--						else
--							sup
--						endif
--		)
--	do{
--		t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--		
--		thisModule.o_1.content <- thisModule.o_1.content->append(t);
--		t;
--	}
--}
--
-----Creates a MultipleGeneralization
-----sub = subtype
-----sup = supertype
--unique lazy rule createMultipleGeneralization{
--	from
--		sub:MOF!EClass, 
--		sup:Sequence(MOF!EClass)
--	to
--		t:plm!MultipleGeneralization(
--			subtype <- if (not sub.oclIsKindOf(plm!Entity)) then
--							thisModule.LazyEClass2Clabject(sub)
--						else
--							sub
--						endif,
--			supertype <- sup->collect(s | if (not s.oclIsKindOf(plm!Entity)) then
--							thisModule.LazyEClass2Clabject(s)
--						else
--							s
--						endif)
--		)
--		do{
--			t.visualizer <- Sequence{thisModule.createVisualizer(t)};
--			
--			thisModule.o_1.content <- thisModule.o_1.content->append(t);
--			
--			t;
--		}
--}
--