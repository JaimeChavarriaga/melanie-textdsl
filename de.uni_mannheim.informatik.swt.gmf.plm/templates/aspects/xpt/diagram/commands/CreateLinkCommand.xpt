«REM»***************************************************************************
 * Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************«ENDREM»
 
«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::Utils»

«REM»This is a complete modification for create role«ENDREM»
«AROUND Main FOR gmfgen::GenLink»
«IF createCommandClassName.startsWith('Role') -»
«EXPAND xpt::Common::copyright FOR diagram.editorGen-»
package «diagram.editCommandsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class RoleCreateCommand extends com.borlander.gmftools.samples.inthemiddle.gmf.commands.AbstractImplicitMiddleElementLinkCreateCommand {
	
	/**
	 * @generated
	 */
	private de.uni_mannheim.informatik.swt.models.plm.PLM.Role implicitRole;
	
	/**
	 * @generated
	 */
	private org.eclipse.emf.ecore.EObject source;
	
	/**
	 * @generated
	 */
	private org.eclipse.emf.ecore.EObject target;
	
	/**
	 * @generated
	 */
	public RoleCreateCommand(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest request, org.eclipse.emf.ecore.EObject source,
			org.eclipse.emf.ecore.EObject target) {
		super(request, source, target);
		
		this.source = source;
		this.target = target;
	}

	/**
	 * @generated
	 */
	@Override
	protected boolean checkSource(org.eclipse.emf.ecore.EObject source) {
		return true;
	}

	/**
	 * @generated
	 */
	@Override
	protected boolean checkTarget(org.eclipse.emf.ecore.EObject target) {
		return true;
	}
	
	/**
	 * 
	 * @generated
	 */
	@Override
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResult(org.eclipse.core.runtime.IProgressMonitor monitor,
			org.eclipse.core.runtime.IAdaptable info) throws ExecutionException{
		
		if (source instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Entity && target instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Entity)
			return doExecuteWithResultImplicitMiddle(monitor, info);
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.Role newElement = de.uni_mannheim.informatik.swt.models.plm.PLM.PLMFactory.eINSTANCE
				.createRole();
		((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)source).getRole().add(newElement);
		newElement.setConnection((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)source);
		newElement.setDestination((de.uni_mannheim.informatik.swt.models.plm.PLM.Entity)target);
		
		//*************************************************************
		// BEGIN CUSTOM CODE
		// This code is only needed as long as the Pallette is used
		// for DSL element (Role) creation
		//*************************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor editor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()
				.getActiveEditor();
		
		//Is the role created by a DSL tool? -> Initialize values
		if (editor.getPalette().getActiveTool().getId().startsWith("dsl."))
		{
			String typeRoleID = editor.getPalette().getActiveTool().getId().replace("dsl.", "").replaceAll("<<.*?>>", "").replace(".CreationTool", "");			
			de.uni_mannheim.informatik.swt.models.plm.PLM.Role typeRole = null;
			
			org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer(source).eAllContents();
			while (iter.hasNext()) {
				org.eclipse.emf.ecore.EObject current = iter.next();
				if (org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(current).equals(typeRoleID)) 
					typeRole = (de.uni_mannheim.informatik.swt.models.plm.PLM.Role)current;
			}
			
			if (typeRole != null){
				newElement.setNavigable(typeRole.isNavigable());
				newElement.setExpressedRoleName(typeRole.getExpressedRoleName());
				newElement.setLower(typeRole.getLower());
				newElement.setUpper(typeRole.getUpper());
			}
		}
		//*************************************************************
		// END CUSTOM CODE
		//*************************************************************
		
		doConfigure(newElement, monitor, info);
		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).setNewElement(newElement);
		
		return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(newElement);
	}

	/**
	 * @generated
	 */
	protected org.eclipse.gmf.runtime.common.core.command.CommandResult doExecuteWithResultImplicitMiddle(org.eclipse.core.runtime.IProgressMonitor monitor,
			org.eclipse.core.runtime.IAdaptable info) throws org.eclipse.core.commands.ExecutionException {
		super.doExecuteWithResult(monitor, info);
		
		if (!canExecute()) {
			throw new org.eclipse.core.commands.ExecutionException(
					"Invalid arguments in create link command"); //$NON-NLS-1$
		}

		de.uni_mannheim.informatik.swt.models.plm.PLM.Role newElement = de.uni_mannheim.informatik.swt.models.plm.PLM.PLMFactory.eINSTANCE.createRole();

		newElement.setDestination((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)source);
		((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)middle).getRole().add(newElement);
		newElement.setConnection((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)middle);
		
		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).setNewElement(newElement);
		
		if (getRequest().getParameter(com.borlander.gmftools.samples.inthemiddle.gmf.gnep.ITMGraphicalNodeEditPolicy.DSL_TYPE) != null)
			instantiateDSLValues((de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)getRequest().getParameter(com.borlander.gmftools.samples.inthemiddle.gmf.gnep.ITMGraphicalNodeEditPolicy.DSL_TYPE),(de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)middle);
		
		return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(newElement);
	}
	
	/**
	 * @generated
	 */
	private void instantiateDSLValues(de.uni_mannheim.informatik.swt.models.plm.PLM.Connection typeConnection, de.uni_mannheim.informatik.swt.models.plm.PLM.Connection instanceConnection) {
		//At first set up the instance connection
		de.uni_mannheim.informatik.swt.models.plm.PLM.PLMFactory.eINSTANCE.dressInstanceFromType(typeConnection, instanceConnection);
		
		org.eclipse.emf.common.util.BasicEList<org.eclipse.emf.ecore.EObject> typeRoles = new org.eclipse.emf.common.util.BasicEList<org.eclipse.emf.ecore.EObject>(typeConnection.getRole());
		
		//Setup roles
		for(de.uni_mannheim.informatik.swt.models.plm.PLM.Role instanceRole : instanceConnection.getRole())
			for(int i = 0; i < typeRoles.size(); i++){
				de.uni_mannheim.informatik.swt.models.plm.PLM.Role typeRole = (de.uni_mannheim.informatik.swt.models.plm.PLM.Role)typeRoles.get(i);
				if (instanceRole.getDestination().isModelInstanceOf(typeRole.getDestination()))
				{
					typeRoles.remove(i);
					instanceRole.setExpressedRoleName(typeRole.getExpressedRoleName());
					instanceRole.setLower(typeRole.getLower());
					instanceRole.setNavigable(typeRole.isNavigable());
					instanceRole.setUpper(typeRole.getUpper());
				}
			}
	}
	
	/**
	 * @generated
	 */
	@Override
	protected com.borlander.gmftools.samples.inthemiddle.gmf.commands.IElementTypeAwareAdapter createSemanticMiddle(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.Connection c  = de.uni_mannheim.informatik.swt.models.plm.PLM.PLMFactory.eINSTANCE.createConnection();
		com.borlander.gmftools.samples.inthemiddle.gmf.commands.IElementTypeAwareAdapter result = new com.borlander.gmftools.samples.inthemiddle.gmf.commands.EObjectAndElementTypeAdapter(c, de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Connection_3060, de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.ConnectionEditPart.VISUAL_ID);
		invokeDefaultElementTypeConfiguration(result, monitor, info);
		de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.ElementInitializers.getInstance().init_Connection_3060(c);
		return result;
	}

	/**
	 * @generated
	 */
	@Override
	protected com.borlander.gmftools.samples.inthemiddle.gmf.commands.IElementTypeAwareAdapter createImplicitTargetLink(
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {

		implicitRole = de.uni_mannheim.informatik.swt.models.plm.PLM.PLMFactory.eINSTANCE.createRole();
		return new com.borlander.gmftools.samples.inthemiddle.gmf.commands.EObjectAndElementTypeAdapter(implicitRole, de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.providers.PLMElementTypes.Role_4024, de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.RoleEditPart.VISUAL_ID);
	}

	/**
	 * @generated
	 */
	@Override
	protected void setupSemanticConnections(org.eclipse.emf.ecore.EObject source,
			com.borlander.gmftools.samples.inthemiddle.gmf.commands.IElementTypeAwareAdapter middle, org.eclipse.emf.ecore.EObject target) {
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.Connection connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.Connection)middle.getAdapter(org.eclipse.emf.ecore.EObject.class);
		
		implicitRole.setDestination((de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)target);
		connection.getRole().add(implicitRole);
		implicitRole.setConnection(connection);
		
		if (connection.eContainer() == null)
			((de.uni_mannheim.informatik.swt.models.plm.PLM.Model)source.eContainer()).getContent().add(connection);	
	}
	
	/**
	 * @generated
	 */
	protected void doConfigure(
			de.uni_mannheim.informatik.swt.models.plm.PLM.Role newElement,
			org.eclipse.core.runtime.IProgressMonitor monitor, org.eclipse.core.runtime.IAdaptable info)
			throws org.eclipse.core.commands.ExecutionException {
		org.eclipse.gmf.runtime.emf.type.core.IElementType elementType = ((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest())
				.getElementType();
		org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest configureRequest = new org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest(
				getEditingDomain(), newElement, elementType);
		configureRequest.setClientContext(((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest())
				.getClientContext());
		configureRequest.addParameters(getRequest().getParameters());
		configureRequest.setParameter(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest.SOURCE,
				source);
		configureRequest.setParameter(org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest.TARGET,
				target);
		org.eclipse.gmf.runtime.common.core.command.ICommand configureCommand = elementType
				.getEditCommand(configureRequest);
		if (configureCommand != null && configureCommand.canExecute()) {
			configureCommand.execute(monitor, info);
		}
	}
}
«ELSE»
	//self.modelFacet.metaClass.ecoreClass.name
	«targetDef.proceed()»
«ENDIF»
«ENDAROUND»

«REM»
/*******************************************************************************
 * This is used for setting up connections after createing them from the palette
 *******************************************************************************/
«AROUND execute(link : gmfgen::GenLink) FOR gmfgen::TypeLinkModelFacet»
«IF self.metaClass.ecoreClass.name.startsWith('Role')-»
«IF (if sourceMetaFeature = null then containmentMetaFeature.ecoreFeature.changeable else sourceMetaFeature.ecoreFeature.changeable endif) and targetMetaFeature.ecoreFeature.changeable-»
		«EXPAND MetaModel::NewInstance('newElement') FOR metaClass-»
		«EXPAND MetaModel::modifyFeature((if hasContainerOtherThanSource(self) then 'getContainer()' else 'getSource()' endif), containmentMetaFeature.genClass, 'newElement') FOR containmentMetaFeature-»
		«IF sourceMetaFeature <> null-»
			«EXPAND MetaModel::modifyFeature('newElement', metaClass, 'getSource()') FOR sourceMetaFeature-»
		«ENDIF-»
		«EXPAND MetaModel::modifyFeature('newElement', metaClass, 'getTarget()') FOR targetMetaFeature-»
		«IF hasExplicitChildFeature(self)-»
			«IF sourceMetaFeature <> null-»
				«EXPAND MetaModel::modifyFeature('getContainer()', containmentMetaFeature.genClass, 'newElement') FOR childMetaFeature-»
			«ELSE-»
				«EXPAND MetaModel::modifyFeature('getSource()', getSourceType(), 'newElement') FOR childMetaFeature-»
			«ENDIF-»
		«ENDIF-»
		«EXPAND initialize(link, 'newElement')-»
		
		//*************************************************************
		// BEGIN CUSTOM CODE
		//*************************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor editor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()
				.getActiveEditor();
		
		//Is the role created by a DSL tool? -> Initialize values
		if (editor.getPalette().getActiveTool().getId().startsWith("dsl."))
		{
			String typeRoleID = editor.getPalette().getActiveTool().getId().replace("dsl.", "").replaceAll("<<.*?>>", "").replace(".CreationTool", "");			
			de.uni_mannheim.informatik.swt.models.plm.PLM.Role typeRole = null;
			
			org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = org.eclipse.emf.ecore.util.EcoreUtil.getRootContainer(source).eAllContents();
			while (iter.hasNext()) {
				org.eclipse.emf.ecore.EObject current = iter.next();
				if (org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(current).equals(typeRoleID)) 
					typeRole = (de.uni_mannheim.informatik.swt.models.plm.PLM.Role)current;
			}
			
			if (typeRole != null){
				newElement.setNavigable(typeRole.isNavigable());
				newElement.setExpressedRoleName(typeRole.getExpressedRoleName());
				newElement.setLower(typeRole.getLower());
				newElement.setUpper(typeRole.getUpper());
			}
		}
		//*************************************************************
		// END CUSTOM CODE
		//*************************************************************
		
		doConfigure(newElement, monitor, info);
		((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).setNewElement(«EXPAND MetaModel::DowncastToEObject('newElement') FOR metaClass»);
		return org.eclipse.gmf.runtime.common.core.command.CommandResult.newOKCommandResult(newElement);
«ELSE-»
		throw new UnsupportedOperationException();
«ENDIF-»
«ELSE»
	«targetDef.proceed()»
«ENDIF»
«ENDAROUND»

«DEFINE initialize(gmfgen::GenLink link, String newElementVar) FOR gmfgen::TypeModelFacet»
	«EXPAND xpt::providers::ElementInitializers::initMethodCall(self, newElementVar) FOR link»
«ENDDEFINE»
«ENDREM»