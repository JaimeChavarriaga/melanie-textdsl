«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

//**************************************************************
//ADDITIONS
//handle notifictaion is overriden later in this transformation
//**************************************************************
«AROUND additions FOR gmfgen::GenNode»
//Gives the option to diplay a DomainConnection/Generalization/Specialization as black rectangle
«IF self.editPartClassName = 'DomainConnectionEditPart' 
	or self.editPartClassName = 'BinaryGeneralizationEditPart' 
	or self.editPartClassName = 'MultipleSpecializationEditPart'
	or self.editPartClassName = 'MultipleGeneralizationEditPart'»
	
	«EXPAND getToggleValue-»
	«EXPAND toggle-»
«ENDIF»
//Responsible for the multiplicity, role, navigation ends and elision
«IF self.editPartClassName = 'DomainConnectionEditPart'»
	«EXPAND updateConnections-»
	«EXPAND refreshSourceConnections-»
«ENDIF»
«IF self.editPartClassName = 'DomainEntityEditPart'
		or self.editPartClassName = 'DomainConnectionEditPart'»

	«EXPAND doElide-»
«ENDIF»
«IF self.editPartClassName = 'DomainEntityEditPart'
		or self.editPartClassName = 'DomainConnectionEditPart'
		or self.editPartClassName = 'BinaryGeneralizationEditPart' 
		or self.editPartClassName = 'MultipleSpecializationEditPart'
		or self.editPartClassName = 'MultipleGeneralizationEditPart'
		or self.editPartClassName = 'ComplementEditPart'
		or self.editPartClassName = 'EqualityEditPart'
		or self.editPartClassName = 'InversionEditPart'»

	«EXPAND setExpressedVisualState-»
	«EXPAND addNotify-»
«ENDIF»
«ENDAROUND»

//**************************************************************
//HANDLE NOTIFICATION
//**************************************************************
«AROUND handleNotificationEvent FOR gmfgen::GenNode-»
«IF self.editPartClassName = 'DomainConnectionEditPart'
	or self.editPartClassName = 'BinaryGeneralizationEditPart' 
	or self.editPartClassName = 'MultipleSpecializationEditPart'
	or self.editPartClassName = 'MultipleGeneralizationEditPart'
	or self.editPartClassName = 'DomainEntityEditPart'
	or self.editPartClassName = 'ComplementEditPart'
	or self.editPartClassName = 'EqualityEditPart'
	or self.editPartClassName = 'InversionEditPart'»

	«EXPAND handleNotificationEventForClabjectLogicElement-»
«ELSEIF self.editPartClassName.startsWith('Attribute')»
	«EXPAND handleNotificationEventForAttribute-»
«ELSEIF self.editPartClassName.startsWith('Method')»
	«EXPAND handleNotificationEventForMethod-»
«ELSEIF self.editPartClassName = 'ModelEditPart'»
	«EXPAND handleNotificationEventForModel-»
«ELSEIF self.editPartClassName.startsWith('Renderer')»
	«EXPAND handleNotificationEventForRenderer-»
«ELSEIF self.editPartClassName = 'OntologyEditPart'»
	«EXPAND handleNotificationEventForOntology»
«ENDIF»
«ENDAROUND»

//**************************************************************
//DEFINITIONS
//**************************************************************
«DEFINE updateConnections FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private void updateConnections() {
		if (this.sourceConnections == null)
			return;

		java.util.List<DomainConnectionParticipantEditPart> sourceConnections = this.sourceConnections;
		de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection domainConnection = (de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) org.eclipse.gmf.runtime.diagram.core.util.ViewUtil
				.resolveSemanticElement(this.getPrimaryView());

		//needs to be used as source connections can have non participant connections
		int numberNonParticipantConnection = 0;

		for (int i = 0; i < sourceConnections.size(); i++) {

			//Take care that no renderer link is used here
			if (! (sourceConnections.get(i) instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart))
			{
				numberNonParticipantConnection++;
				continue;
			}

			//****************************************************************************
			//Set navigable
			//****************************************************************************
			if (domainConnection.getIsNavigable().size() > i  - numberNonParticipantConnection
					&& domainConnection.getIsNavigable().get(i  - numberNonParticipantConnection) == true) {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(new org.eclipse.draw2d.PolylineDecoration());
			} else {
				org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart connection = sourceConnections.get(i);
				org.eclipse.draw2d.PolylineConnection connectionFigure = (org.eclipse.draw2d.PolylineConnection) connection
						.getFigure();
				connectionFigure.setTargetDecoration(null);
			}

			//****************************************************************************
			//Set role
			//****************************************************************************
			if (domainConnection.getRoleName().size() > i  - numberNonParticipantConnection) {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText(domainConnection.getRoleName().get(i  - numberNonParticipantConnection));
			} else {
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart connection = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart) sourceConnections
						.get(i);
				de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
						.getFigure();
				connectionFigure
						.getFigureDomainConnectionParticipantsNameFigure()
						.setText("");
			}

			//****************************************************************************
			//Set multiplicity
			//****************************************************************************
			//can we assume default lower = 0 and default upper = 1?
			int lower = 0, upper = 1;

			if (domainConnection.getLower().size() > i - numberNonParticipantConnection)
				lower = domainConnection.getLower().get(i - numberNonParticipantConnection);
			if (domainConnection.getUpper().size() > i - numberNonParticipantConnection)
				upper = domainConnection.getUpper().get(i - numberNonParticipantConnection);

			//now set the string
			String multiplicity = "";
			if (lower == 0 && upper == 1)
				;//Do nothing
			else if (upper > 0)
				multiplicity = lower + ".." + upper;
			else if (lower == 0 && upper == -1)
				multiplicity = "*";
			else if (upper == -1)
				multiplicity = lower + "..n";

			//get the label to set
			DomainConnectionParticipantEditPart connection = (DomainConnectionParticipantEditPart) sourceConnections
					.get(i);
			de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure connectionFigure = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionParticipantEditPart.DomainConnectionParticipantsFigure) connection
					.getFigure();
			connectionFigure
					.getFigureDomainConnectionParticipantsMultiplicityFigure()
					.setText(multiplicity);
		}
	}
«ENDDEFINE»

«DEFINE refreshSourceConnections FOR gmfgen::GenNode»
	/**
	 * Updates the connections after one is added. Needed for setting up connection
	 * participants when diagram is loaded.
	 *
	 * @generated
	 */
	@Override
	protected void refreshSourceConnections() {
		super.refreshSourceConnections();
		
		if (this.sourceConnections != null)
			updateConnections();
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForClabjectLogicElement FOR gmfgen::GenNode»
	/**
	 * Updates the connections after a value was set and does elision
	 *
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		«IF self.editPartClassName = 'DomainConnectionEditPart'»
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection) {
			updateConnections();
		}
		«ENDIF»
		
		org.eclipse.emf.ecore.EStructuralFeature changedFeature = (org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature();
		
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Element)
		{
			if (changedFeature.getName().equals("elided")|| 
				changedFeature.getName().equals("expressed"))
			{
				updateView(false);
			}
			«IF self.editPartClassName='DomainEntityEditPart'»
			else if (changedFeature.getName().equals("name"))
			{
				de.uni_mannheim.informatik.swt.models.plm.PLM.Feature[] features = new de.uni_mannheim.informatik.swt.models.plm.PLM.Feature[] {};
			
				org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL.newInstance();
				org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl.createOCLHelper();
				helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.LML_MODEL);
				
				try {
					org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper
							.createQuery("Feature.allInstances()");
					features = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Feature>) ocl
							.evaluate(org.eclipse.emf.ecore.util.EcoreUtil
									.getRootContainer(resolveSemanticElement()), q))
							.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Feature[] {});
				} catch (org.eclipse.ocl.ParserException e) {
					e.printStackTrace();
				}
			
				//We found features
				if (features.length > 0) {
					org.eclipse.ui.IEditorPart editor = org.eclipse.ui.PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage()
							.getActiveEditor();
					if (!(editor instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
						return;

					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) editor;

					for (de.uni_mannheim.informatik.swt.models.plm.PLM.Feature f : features) 
					{	
						//if a attribute is hidden via the notational model it cannot be resolved
						java.util.List featureEditParts = 
							 plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(f),org.eclipse.gef.NodeEditPart.class);
					
					 	if (featureEditParts.size() > 0)
					 	{
							 org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart featureEditPart = (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)featureEditParts.get(0);
							 featureEditPart.performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
						}
					}
				}
			} 
			«ENDIF»
		}
	}
	
	/**
	 * @generated
	 */
	public void updateView(boolean readOnlyContext)
	{
		«IF self.editPartClassName = 'DomainConnectionEditPart'
			or self.editPartClassName = 'DomainEntityEditPart'»
		de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject c = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)resolveSemanticElement();
		«ENDIF»
		
		«IF not(self.editPartClassName='DomainEntityEditPart'
			or self.editPartClassName = 'ComplementEditPart'
			or self.editPartClassName = 'EqualityEditPart'
			or self.editPartClassName = 'InversionEditPart')»
		java.lang.Boolean toggleValue = getToggleValue();
		
		//We do toggle the domain connection
		if (toggleValue != null)
			toggle(readOnlyContext);
		«ENDIF»
		
		«IF self.editPartClassName = 'DomainConnectionEditPart'»
		//We can do elide as long as a domain connection is not toggled
		if(toggleValue == null || toggleValue == false)
			doElide(readOnlyContext);
		«ELSEIF self.editPartClassName = 'DomainEntityEditPart'»
		doElide(readOnlyContext);
		«ENDIF»
		
		«IF self.editPartClassName = 'DomainConnectionEditPart'»
		//We can change expressed as long as domain connection is not elided and not toggled
		if (!c.isElided() && (toggleValue == null || toggleValue == false))
			setExpressedVisualState();
		«ELSEIF self.editPartClassName = 'DomainEntityEditPart'»
		//We can change expressed as long as domain connection is not elided and not toggled
		if (!c.isElided())
			setExpressedVisualState();
		«ELSEIF self.editPartClassName = 'ComplementEditPart'
			or self.editPartClassName = 'EqualityEditPart'
			or self.editPartClassName = 'InversionEditPart'»
		setExpressedVisualState();
		«ELSE»
		//We can change expressed as long as domain connection is not elided and not toggled
		if ((toggleValue == null || toggleValue == false))
			setExpressedVisualState();
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE getToggleValue FOR gmfgen::GenNode»
	/**
	 * 
	 * @return null if no toggeling infotmation is available, else true or false
	 *
	 * @generated
	 */
	private Boolean getToggleValue()
	{
		//boolean collapse = false;
		
		//********************************************************
		//Find the renderer attached to this element 
		//********************************************************
		de.uni_mannheim.informatik.swt.models.plm.PLM.Element self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Element) this
				.resolveSemanticElement();

		//No rendering information found => all DomainConnection remains expanded
		if (self.getRenderer().size() == 0) {
			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure) figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure) boderItemContainer.getChildren().get(0))
					.setVisible(false);

			return null;
		}

		//********************************************************
		//Do toggling based on information in the diagram
		//********************************************************
		//de.uni_mannheim.informatik.swt.models.plm.PLM.Field collapsedField = null;

		//for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : self
		//		.getRenderer().getChildren()) {
		//	if (e instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field) {
		//		if (e.getName().equals("collapsed")) {
		//			collapse = Boolean
		//					.parseBoolean(((de.uni_mannheim.informatik.swt.models.plm.PLM.Field) e)
		//							.getValue());
		//			break;
		//		}
		//	}
		//}
		
		de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer r = self.getRenderer().get(0);
		String collapsedString = r.getValueForKey("collapsed");
		
		return java.lang.Boolean.parseBoolean(collapsedString);
	}
«ENDDEFINE»

«DEFINE toggle FOR gmfgen::GenNode»
	/**
	 * This renders the DomainConnectionEditPart based on information
	 * in the model. Collapsed means that the DomainConnection is rendered as small 
	 * black rectangle. Collapsed means that the DomainConnection will rendered as
	 * hexagon, its default figure.
	 * 
	 * @generated
	 */
	private void toggle(boolean readOnlyContext) {
		java.lang.Boolean collapse = getToggleValue();
		
		//expand element
		if (collapse == null || !collapse) {

			this.setBackgroundColor(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(
					org.eclipse.swt.SWT.COLOR_WHITE));

			((org.eclipse.draw2d.IFigure)figure.getChildren().get(0)).getChildren().remove(0);
			((org.eclipse.draw2d.IFigure)figure.getChildren().get(0)).getChildren().add(0, polygonFigureCache);
			
			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure)figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure) boderItemContainer.getChildren().get(0))
					.setVisible(false);

			//Allow Resizing
			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE,
					new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy());

			//When we come from read only context / addNotify the size should be in the
			//notation model
			if (!readOnlyContext)
			{
				//Old code -> Altentative to Autosize
				/*org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
				«IF self.editPartClassName = 'DomainConnectionEditPart'»
				rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(70,
						60));
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size", new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(
								(org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
				«ELSE»
				rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(60,
						25));
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size", new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(
								(org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
				«ENDIF»*/
				
				org.eclipse.gef.Request rr = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_AUTOSIZE);
				performRequest(rr);
			}
			
			return;
		}
		//collapse element
		else {
			//**************************************************
			//Create the new figure (Rectangle with black background)
			//**************************************************
			
			org.eclipse.draw2d.geometry.Rectangle rect = (figure.getClientArea() != null) ? figure
					.getClientArea().getCopy() : null;

			((org.eclipse.draw2d.IFigure)figure.getChildren().get(0)).getChildren().clear();

			org.eclipse.draw2d.RectangleFigure rf = new org.eclipse.draw2d.RectangleFigure();

			rf.setBackgroundColor(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(
					org.eclipse.swt.SWT.COLOR_BLACK));
			((org.eclipse.draw2d.IFigure)figure.getChildren().get(0)).getChildren().add(0, rf);
			rf.setParent(((org.eclipse.draw2d.IFigure)figure.getChildren().get(0)));

			//Hide external name label
			org.eclipse.draw2d.IFigure boderItemContainer = (org.eclipse.draw2d.IFigure) figure.getChildren().get(1);
			((org.eclipse.draw2d.IFigure) boderItemContainer.getChildren().get(0)).setVisible(true);

			//A client rectangle existed
			if (rect != null
					&& (rect.width != 0 && rect.height != 0 && rect.x != 0 && rect.y != 0)) {
				cachedSize = rect.getCopy().getSize();
				rect.setSize(8, 8);
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size",
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(
						new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
			}
			//A client rectangle does not exist -> called from activate
			else {
				rf.setSize(8, 8);
			}

			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE,
					new org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx());
		}
	}
«ENDDEFINE»

«DEFINE addNotify FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	public void addNotify() {
		super.addNotify();

		//DomainEntity EditParts do not have a outer BorderItemContainer in contrast
		//to DomainConnections etc. as those have external labels
		«IF self.editPartClassName = 'DomainEntityEditPart'
			or self.editPartClassName = 'ComplementEditPart'
			or self.editPartClassName = 'EqualityEditPart'
			or self.editPartClassName = 'InversionEditPart'»
		polygonFigureCache = (org.eclipse.draw2d.IFigure)figure.getChildren().get(0);
		«ELSE»
		//save the initial children
		polygonFigureCache = (org.eclipse.draw2d.IFigure)((org.eclipse.draw2d.IFigure)figure.getChildren().get(0)).getChildren().get(0);
		«ENDIF»
		
		updateView(true);
	}
«ENDDEFINE»

«DEFINE setExpressedVisualState FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.geometry.Dimension cachedSize = null;
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.IFigure polygonFigureCache = null;
	
	/**
	 * Sets the figure to visually expressed or computed. Depending on the expressed
	 * value.
	 * 
	 * @generated
	 */
	private void setExpressedVisualState() {
		de.uni_mannheim.informatik.swt.models.plm.PLM.Element self = (de.uni_mannheim.informatik.swt.models.plm.PLM.Element) resolveSemanticElement();

		if (self.isExpressed()) {
			«IF self.editPartClassName = 'DomainEntityEditPart'
				or self.editPartClassName = 'ComplementEditPart'
				or self.editPartClassName = 'EqualityEditPart'
				or self.editPartClassName = 'InversionEditPart'»
			((org.eclipse.draw2d.Shape) figure.getChildren().get(0))
				.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
			«ELSE»
			org.eclipse.draw2d.IFigure defalutSizeNodeFigure = (org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure) figure
				.getChildren().get(0);
			((org.eclipse.draw2d.ScalablePolygonShape) defalutSizeNodeFigure.getChildren().get(0))
				.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
			«ENDIF»
		} else {
			«IF self.editPartClassName = 'DomainEntityEditPart'
				or self.editPartClassName = 'ComplementEditPart'
				or self.editPartClassName = 'EqualityEditPart'
				or self.editPartClassName = 'InversionEditPart'»
			((org.eclipse.draw2d.Shape) figure.getChildren().get(0))
				.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
			((org.eclipse.draw2d.Shape) figure.getChildren().get(0))
				.setLineDash(new float[] { 10 });
			«ELSE»
			org.eclipse.draw2d.IFigure defalutSizeNodeFigure = (org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure) figure
				.getChildren().get(0);
			((org.eclipse.draw2d.ScalablePolygonShape) defalutSizeNodeFigure.getChildren().get(0))
				.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
			((org.eclipse.draw2d.ScalablePolygonShape) defalutSizeNodeFigure.getChildren().get(0))
				.setLineDash(new float[] { 10 });
			«ENDIF»
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForAttribute FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Feature 
				&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("expressed"))
		{
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.Feature f = (de.uni_mannheim.informatik.swt.models.plm.PLM.Feature)resolveSemanticElement();
			if (f.isExpressed())
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(false);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(0);
			}
			else
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(true);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.colorToInteger(org.eclipse.gmf.runtime.diagram.ui.figures.DiagramColorConstants.diagramGray));
			}
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Feature
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName().equals("elided")) {

			de.uni_mannheim.informatik.swt.models.plm.PLM.Feature f = (de.uni_mannheim.informatik.swt.models.plm.PLM.Feature) resolveSemanticElement();
			if (f.isElided()) {
				//hide all other labels
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>)children)
				{
					if (editPart == children.get(0))
						continue;
					((org.eclipse.gmf.runtime.notation.DecorationNode) editPart.getNotationView()).setVisible(false);
				}
				
				performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
				
				//Set the name label to "..."
				((org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart)children.get(0)).setLabelText("...");
			} else {
				//hide all other labels
				for (org.eclipse.gmf.runtime.notation.DecorationNode view : (java.util.List<org.eclipse.gmf.runtime.notation.DecorationNode>)getNotationView().getChildren())
				{
					view.setVisible(true);
				}
				
				performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
				
				((org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart)children.get(0)).setLabelText(f.getName());
			}
		}

		«IF self.editPartClassName = 'AttributeEditPart'»
		//***********************************************************
		//Update DomainEntities on field change (for rendering)
		//***********************************************************
//		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Field) {
//			org.eclipse.emf.ecore.EObject field = (org.eclipse.emf.ecore.EObject) notification.getNotifier();
//			org.eclipse.emf.ecore.EObject container = field.eContainer();

			//Only DomainEntyties are used to store rendering information
//			if (container instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer) {
				//Get all DomainEntities that reference this DomainEntity as renderer
//				java.util.Collection<org.eclipse.emf.ecore.EObject> rendererReferencere = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil
//						.getReferencers(
//								container,
//								new org.eclipse.emf.ecore.EReference[] { de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.eINSTANCE
//										.getElement_Renderer() });

//				for (org.eclipse.emf.ecore.EObject obj : rendererReferencere) {
//					org.eclipse.ui.IEditorPart editorPart = org.eclipse.ui.PlatformUI.getWorkbench()
//							.getActiveWorkbenchWindow().getActivePage()
//							.getActiveEditor();
					//If no PLM Diagram is opened we want to do nothing
//					if (!(editorPart instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor))
//						return;
//					de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor plmEditor = (de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.part.PLMDiagramEditor) editorPart;
//					org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart node =
//						(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)plmEditor.getDiagramGraphicalViewer().findEditPartsForElement(org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(obj), org.eclipse.gef.NodeEditPart.class).get(0);
					
//					org.eclipse.gef.Request refreshRequest = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH);
//					node.performRequest(refreshRequest);
//				}
//			}
//		}
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForMethod FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);

		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Feature 
				&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("expressed"))
		{
			
			de.uni_mannheim.informatik.swt.models.plm.PLM.Feature f = (de.uni_mannheim.informatik.swt.models.plm.PLM.Feature)resolveSemanticElement();
			if (f.isExpressed())
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(false);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(0);
			}
			else
			{
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setItalic(true);
				((org.eclipse.gmf.runtime.notation.Shape)this.getNotationView()).setFontColor(org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities.colorToInteger(org.eclipse.gmf.runtime.diagram.ui.figures.DiagramColorConstants.diagramGray));
			}
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForModel FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) 
	{
		super.handleNotificationEvent(notification);
		
		if(notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
			&& ((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("children"))
		{
			if (notification.getNewValue() != null)
			{
				de.uni_mannheim.informatik.swt.models.plm.PLM.Model m = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model)notification.getNotifier();
				
				if (notification.getNewValue() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)
				{
					de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject c = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject)notification.getNewValue();
					de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology)m.eContainer();
					c.setLevel(ont.getChildren().indexOf(m));
				}
			}
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model && 
				((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("showRenderer"))
		{
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model model = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model) notification.getNotifier();

			de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] renderers = new de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] {};

			//find all renderers in the model
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.MODEL);

			try 
			{
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("self.children->collect(c | c.renderer)");
				renderers = ((java.util.ArrayList<de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer>) ocl.evaluate(resolveSemanticElement(), q)).toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] {});
			}
			catch (org.eclipse.ocl.ParserException e) 
			{
				e.printStackTrace();
			}
			
			//find the notational elements for the renderers
			for(de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer r : renderers)
			{
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());
				
				while (iter.hasNext())
				{
					org.eclipse.emf.ecore.EObject obj = iter.next();
					
					if (obj instanceof org.eclipse.gmf.runtime.notation.Node)
					{
						org.eclipse.gmf.runtime.notation.Node n = (org.eclipse.gmf.runtime.notation.Node)obj;
						
						if (n.getElement() == r)
						{
							if (model.getShowRenderer().equals("ShowRenderingOptions::NONE"))
								n.setVisible(false);
							else
								n.setVisible(true);
							
							break;
						}
					}
				}
			}
			
			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
				 else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
					&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
							.equals("origin")) 
		{
			de.uni_mannheim.informatik.swt.models.plm.PLM.Element[] elements = new de.uni_mannheim.informatik.swt.models.plm.PLM.Element[] {};
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model model = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model)resolveSemanticElement();
			
			//find all renderers in the model
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL
					.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl
					.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.MODEL);

			try {
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("self.children");
				
				elements = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Element>) ocl
						.evaluate(resolveSemanticElement(), q))
						.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Element[] {});
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}

			//find the notational elements for the renderers
			for (de.uni_mannheim.informatik.swt.models.plm.PLM.Element e : elements) {
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());

				while (iter.hasNext()) {
					org.eclipse.emf.ecore.EObject obj = iter.next();

					if (obj instanceof org.eclipse.gmf.runtime.notation.Shape) {
						org.eclipse.gmf.runtime.notation.Shape s = (org.eclipse.gmf.runtime.notation.Shape) obj;

						if (s.getElement() == e) {
							if (model.getOrigin().equals("OriginOptions::Expressed") && e.isExpressed()
									|| model.getOrigin().equals("OriginOptions::Computed") && !e.isExpressed()
									|| model.getOrigin().equals("OriginOptions::All"))
								s.setVisible(true);
							else
								s.setVisible(false);

							break;
						}
					}
				}
			}
			
			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
		else if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model
				&& ((org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature()).getName()
						.equals("completness")) {
			de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject[] clabjects = new de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject[] {};
			de.uni_mannheim.informatik.swt.models.plm.PLM.Model model = (de.uni_mannheim.informatik.swt.models.plm.PLM.Model) resolveSemanticElement();

			//find all renderers in the model
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL
					.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl
					.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.MODEL);

			try {
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper
						.createQuery("self.children->select(c | c.oclIsKindOf(Clabject))");

				clabjects = ((java.util.HashSet<de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject>) ocl
						.evaluate(resolveSemanticElement(), q))
						.toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject[] {});
			} catch (org.eclipse.ocl.ParserException e) {
				e.printStackTrace();
			}

			//find the notational elements for the renderers
			for (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject c : clabjects) {
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());

				while (iter.hasNext()) {
					org.eclipse.emf.ecore.EObject obj = iter.next();

					if (obj instanceof org.eclipse.gmf.runtime.notation.Node) {
						org.eclipse.gmf.runtime.notation.Node s = (org.eclipse.gmf.runtime.notation.Node) obj;

						if (s.getElement() == c) {
							if (model.getCompletness().equals(
									"CompletnessOptions::NoElision")
									&& c.isElided())
								s.setVisible(false);
							else
								s.setVisible(true);

							break;
						}
					}
				}
			}

			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForRenderer FOR gmfgen::GenNode»
	/**
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) 
	{
		super.handleNotificationEvent(notification);
		
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer 
			&& getParent() != null)
		{
			getParent().performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
			
			//For DomainConnections we need to take care of the external label -> updateView()
			if (((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart)getParent()).resolveSemanticElement() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.DomainConnection)
				((de.uni_mannheim.informatik.swt.models.plm.PLM.diagram.edit.parts.DomainConnectionEditPart)getParent()).updateView(false);
		}
	}
«ENDDEFINE»

«DEFINE handleNotificationEventForOntology FOR gmfgen::GenNode»
	/**
	 * Inform all renderers to set their view state
	 * 
	 * @generated
	 */
	@Override
	protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification notification) {
		super.handleNotificationEvent(notification);
		
		if (notification.getNotifier() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology && 
				((org.eclipse.emf.ecore.EStructuralFeature)notification.getFeature()).getName().equals("showRenderer"))
		{
			de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology ont = (de.uni_mannheim.informatik.swt.models.plm.PLM.Ontology) notification.getNotifier();

			de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] renderers = new de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] {};

			//find all renderers in the ontology
			org.eclipse.ocl.ecore.OCL ocl = org.eclipse.ocl.ecore.OCL.newInstance();
			org.eclipse.ocl.helper.OCLHelper<org.eclipse.emf.ecore.EClassifier, ?, ?, org.eclipse.ocl.ecore.Constraint> helper = ocl.createOCLHelper();
			helper.setContext(de.uni_mannheim.informatik.swt.models.plm.PLM.PLMPackage.Literals.ONTOLOGY);

			try 
			{
				org.eclipse.ocl.expressions.OCLExpression<org.eclipse.emf.ecore.EClassifier> q = helper.createQuery("self.children->collect(c | c.renderer)");
				renderers = ((java.util.ArrayList<de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer>) ocl.evaluate(resolveSemanticElement(), q)).toArray(new de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer[] {});
			}
			catch (org.eclipse.ocl.ParserException e) 
			{
				e.printStackTrace();
			}
			
			//find the notational elements for the renderers
			for(de.uni_mannheim.informatik.swt.models.plm.PLM.Renderer r : renderers)
			{
				org.eclipse.emf.common.util.TreeIterator<org.eclipse.emf.ecore.EObject> iter = (getNotationView().eAllContents());
				
				while (iter.hasNext())
				{
					org.eclipse.emf.ecore.EObject obj = iter.next();
					
					if (obj instanceof org.eclipse.gmf.runtime.notation.Node)
					{
						org.eclipse.gmf.runtime.notation.Node n = (org.eclipse.gmf.runtime.notation.Node)obj;
						
						if (n.getElement() == r)
						{
							if (ont.getShowRenderer().equals("ShowRenderingOptions::NONE"))
								n.setVisible(false);
							else
								n.setVisible(true);
							
							break;
						}
					}
				}
			}
			
			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
	}
«ENDDEFINE»

«DEFINE doElide FOR gmfgen::GenNode»
	/**
	 * Elides the DomainEntity depending on the elided attribute
	 * 
	 * @param readOnlyTransaction when called from addNotify
	 * 
	 * @generated
	 */
	private void doElide(boolean readOnlyTransaction) {

		de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject clab = (de.uni_mannheim.informatik.swt.models.plm.PLM.Clabject) resolveSemanticElement();

		«IF self.editPartClassName = 'DomainConnectionEditPart'»
		//The container that contains the figure and the border item container
		org.eclipse.draw2d.IFigure borderContainer = figure;
		//The figure
		org.eclipse.draw2d.IFigure defaultSizeNodeFigure = (org.eclipse.draw2d.IFigure) borderContainer.getChildren()
				.get(0);
		//the container that contains the border items
		org.eclipse.draw2d.IFigure borderItemContainer = (org.eclipse.draw2d.IFigure) borderContainer.getChildren()
				.get(1);
		«ELSE»
		org.eclipse.draw2d.IFigure defaultSizeNodeFigure = figure;
		«ENDIF»
		
		//Elide and hide if model.complteness = NoElision
		if (clab.isElided()) {

			defaultSizeNodeFigure.getChildren().remove(0);
			
			//Set up the new figure for the elided node
			org.eclipse.draw2d.RectangleFigure rf = new org.eclipse.draw2d.RectangleFigure();
			rf.setSize(new org.eclipse.draw2d.geometry.Dimension(30, 15));
			
			rf.setLayoutManager(new org.eclipse.draw2d.ToolbarLayout());
			rf.setOutline(false);

			org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel wl = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();
			wl.setText("...");
			org.eclipse.swt.graphics.Color black = org.eclipse.ui.PlatformUI.getWorkbench().getDisplay().getCurrent().getSystemColor(org.eclipse.swt.SWT.COLOR_BLACK);
			wl.setForegroundColor(black);

			rf.add(wl);
			defaultSizeNodeFigure.getChildren().add(0, rf);
			rf.setParent(defaultSizeNodeFigure);
			
			//On Startup the size is saved in the notational model
			if (!readOnlyTransaction) {
				//Resize the elided node
				org.eclipse.draw2d.geometry.Rectangle rect = figure.getClientArea().getCopy();
				rect.setSize((cachedSize != null) ? cachedSize : new org.eclipse.draw2d.geometry.Dimension(
						10, 10));
				org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand sbc = new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(
						this.getEditingDomain(), "change size",
						new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter((org.eclipse.gmf.runtime.notation.View) this.getModel()), rect);
				getEditDomain().getCommandStack().execute(
						new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(sbc));
			}

			//Dash all lines from to the elided element
			if (targetConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) targetConnections) {
					if (!(link.resolveSemanticElement() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation)){
						((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
								.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
						((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
								.setLineDash(new int[] { 10 });
					}
				}
			} else if (sourceConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) sourceConnections) {
						if (!(link.resolveSemanticElement() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation)){
						((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
								.setLineStyle(org.eclipse.swt.SWT.LINE_CUSTOM);
						((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
								.setLineDash(new int[] { 10 });
					}
				}
			}

			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE,
					new org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx());

			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));

			if (clab.eContainer() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Model 
					&& ((de.uni_mannheim.informatik.swt.models.plm.PLM.Model)clab.eContainer()).getCompletness().equalsIgnoreCase("CompletnessOptions::NoElision"))
				getNotationView().setVisible(false);
		}
		//We only need to revert the elision if we have done it when the editor was open
		else
		{
			defaultSizeNodeFigure.getChildren().remove(0);
			defaultSizeNodeFigure.getChildren().add(0, polygonFigureCache);
			polygonFigureCache.setParent(defaultSizeNodeFigure);

			//We cannot execute commands in read only context
			if (!readOnlyTransaction)
			{
				org.eclipse.gef.Request rr = new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_AUTOSIZE);
				performRequest(rr);
			}
			
			//Make all lines from to the elided element solid
			if (targetConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) targetConnections) {
					if (!(link.resolveSemanticElement() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation))
						((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
				}
			} else if (sourceConnections != null) {
				for (org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart link : (java.util.List<org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart>) sourceConnections) {
					if (!(link.resolveSemanticElement() instanceof de.uni_mannheim.informatik.swt.models.plm.PLM.Instantiation))
						((org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx) link.getFigure())
							.setLineStyle(org.eclipse.swt.SWT.LINE_SOLID);
				}
			}

			removeEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
			installEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE,
					new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy());
					
			performRequest(new org.eclipse.gef.Request(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_REFRESH));
		}
	
		«IF self.editPartClassName = 'DomainConnectionEditPart'»
		//Hide the outer label
		((org.eclipse.draw2d.IFigure) borderItemContainer.getChildren().get(0)).setVisible(false);
		«ENDIF»
	}
«ENDDEFINE»