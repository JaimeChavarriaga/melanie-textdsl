/*******************************************************************************
 * Copyright (c) 2011 University of Mannheim: Chair for Software Engineering
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Ralph Gerbig - initial API and implementation and initial documentation
 *******************************************************************************/

modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
	
transformation postRec(inout gmfgenModel : GMFGEN);

property genNavigator : GenNavigator = null;
property genStandardPrefencePage : GenStandardPreferencePage = null;
property genPlugIn : GenPlugin = null;
property genEditorGenerator : GenEditorGenerator = null;
property genDiagram : GenDiagram = null;
property genPropertySheet : GenPropertySheet = null;
		
 
main() {
	
	--Needed for Attribute/Method Resize when LMLVisualizers are shown/hidden Bug 344104
	gmfgenModel.objectsOfType(GenChildNode)->asOrderedSet()
		->select(c | c.editPartClassName.startsWith("Attribute") 
			or c.editPartClassName.startsWith("Method"))->forEach(node)
		{
			var defaultSize := new DefaultSizeAttributes();
			defaultSize.height := 20;
			defaultSize.width := 0;
			node.viewmap.attributes := Sequence{defaultSize};
		};
	
	gmfgenModel.objectsOfType(GenChildNode)->asOrderedSet()
		->select(c | c.editPartClassName.startsWith("Model"))->forEach(node)
		{
			var defaultSize := new DefaultSizeAttributes();
			defaultSize.height := 100;
			defaultSize.width := 0;
			node.viewmap.attributes := Sequence{defaultSize};
		};
	
	--Set ListLayout for Model(Clabject) Compartment
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName = "OntologyModelCompartmentEditPart")->first()
				.listLayout := true;
	
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName.find("Attributes") > 0)->forEach(comp)
				{
					comp.listLayout := true;
				};
	
	gmfgenModel.objectsOfType(GenCompartment)->asOrderedSet()
				->select(c | c.editPartClassName.find("Methods") > 0)->forEach(comp)
				{
					comp.listLayout := true;
				};
	
	--Fix the Create Undefined Bug 354467 
	gmfgenModel.objectsOfType(GenLink)->asOrderedSet()
				->select(l | l.elementType.oclIsTypeOf(SpecializationType) and l.elementType.displayName = 'Undefined')->forEach(link)
				{
					link.elementType.displayName := link.modelFacet.oclAsType(FeatureLinkModelFacet).metaFeature.ecoreFeature.name.firstToUpper();
				};
	
	--Setup the GenEditorGenerator
	this.genEditorGenerator := gmfgenModel.objectsOfType(GenEditorGenerator)->asOrderedSet()->first();
	genEditorGenerator.sameFileForDiagramAndModel := true;
	genEditorGenerator.dynamicTemplates := true;
	genEditorGenerator.templateDirectory := "/de.uni_mannheim.informatik.swt.models.gmf/templates";
	genEditorGenerator.diagramFileExtension := "lml";
	genEditorGenerator.modelID := "LML";
	
	--Setup the GenDiagram
	genDiagram
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->first();
	genDiagram.validationEnabled := true;
	genDiagram.validationDecorators := true;
	genDiagram.validationProviderPriority := ProviderPriority::Medium;
	genDiagram.validationDecoratorProviderPriority := ProviderPriority::Medium;
	genDiagram.creationWizardCategoryID := "de.uni_mannheim.informatik.swt.lmlcategory";
	
	--Setup the GenPlugin
	this.genPlugIn := gmfgenModel.objectsOfType(GenPlugin)->asOrderedSet()->first();
	genPlugIn.provider := "University of Mannheim: Chair for Software Engineering";
	genPlugIn.name := "MelAniE - Multi-levEl modeLing And oNtology engIneering Environment Plugin";
	genPlugIn.printingEnabled := true;
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.itemis.gmf.runtime.extensions');
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.uni_mannheim.informatik.swt.models.gmf');
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.uni_mannheim.informatik.swt.mlm.visualization.service');
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.uni_mannheim.informatik.swt.common.gmf.inthemiddle');
	genPlugIn.requiredPlugins := genPlugIn.requiredPlugins->append('de.uni_mannheim.informatik.swt.mlm.workbench');
	
	--Set the properties for the Prefrence Page (Window -> Preferences)
	this.genStandardPrefencePage := gmfgenModel.objectsOfType(GenStandardPreferencePage)->asOrderedSet()->first();
	genStandardPrefencePage.name := "MelAniE";
	
	--Setup the linguistic properties view
	this.genPropertySheet := gmfgenModel.objectsOfType(GenPropertySheet)->asOrderedSet()->first();
	genPropertySheet.tabs->select(t | t.iD = 'domain')->first().label := 'Linguistic';
	
	--Build up the navigation structure
	this.genNavigator := gmfgenModel.objectsOfType(GenNavigator)->asOrderedSet()->first();

	--Clear all child entries
	this.genNavigator.childReferences := OrderedSet{};

	--Root group for the LMLModel container
	var LMLModelChildReference 
		:= new GenNavigatorChildReference();
	LMLModelChildReference.child 
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	
	--Group for all Ontologies
	var ontologyChildReference 
		:= xmap createChildReference("OntologyEditPart", "LMLModelEditPart", "Ontologies", "icons/ontology16.gif");
	ontologyChildReference.parent 
		:= gmfgenModel.objectsOfType(GenDiagram)->asOrderedSet()->select(n | n.editPartClassName = "LMLModelEditPart")->first();
	--Group for the LMLVisualizers of the ontology
	var ontLMLVisualizerChildReference 
		:= xmap createChildReference("LMLVisualizer10EditPart", "OntologyEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
	
	--Group for all Models
	var modelChildReference 
		:= xmap createChildReference("ModelEditPart", "OntologyEditPart", "Models", "icons/model16.gif");
	--Group for all ModelLMLVisualizers
	var modelLMLVisualizerChildReference 
		:= xmap createChildReference("LMLVisualizer2EditPart", "ModelEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
	
	--Group for all Entities
	var entityChildReference 
		:= xmap createChildReference("EntityEditPart", "ModelEditPart", "Entities", "icons/clabject16.gif");
		--s for Entities that describe rendering of ontologies
	var entityAttributeChildReference 
		:= xmap createChildReference("Attribute2EditPart", "EntityEditPart", "Attributes", "icons/field16.gif");
	--Methods for Entities that describe rendering of ontologies
	var entityMethodChildReference
		:= xmap createChildReference("MethodEditPart", "EntityEditPart", "Methods", "icons/method16.gif");
	var entityLMLVisualizerChildReference
		:= xmap createChildReference("LMLVisualizer9EditPart", "EntityEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
	
	--Group for all Connections
	var connectionChildReference 
		:= xmap createChildReference("ConnectionEditPart", "ModelEditPart", "Connections", "icons/connection16.gif");
	--Group for all ConnectionAttributes
	var connectionAttributeChildReference 
		:= xmap createChildReference("AttributeEditPart", "ConnectionEditPart", "Attributes", "icons/field16.gif");
	--Group for all ConnectionLMLVisualizers
	var connectionLMLVisualizerChildReference 
		:= xmap createChildReference("LMLVisualizerEditPart", "ConnectionEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
	
	--Group for all Generalizations
	var generalizationChildReference 
		:= xmap createChildReference("GeneralizationEditPart", "ModelEditPart", "Generalizations", "icons/inheritance16.gif");
	--Group for all GeneralizationLMLVisualizers
	var generalizationLMLVisualizerChildReference
		:= xmap createChildReference("LMLVisualizer8EditPart", "GeneralizationEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
	
	--Group for all ComplementSetRelationships
	var complementChildReference 
		:= xmap createChildReference("ComplementEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all ComplementSetRelationshipLMLVisualizers
	var complementLMLVisualizerChildReference 
		:= xmap createChildReference("LMLVisualizer3EditPart", "ComplementEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
		
	--Group for all EqualSetRelationships
	var equalChildReference 
		:= xmap createChildReference("EqualityEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all EqualSetRelationships
	var equalLMLVisualizerChildReference 
		:= xmap createChildReference("LMLVisualizer4EditPart", "EqualityEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");		
	
	--Group for all InversionSetRelationships
	var inversionChildReference 
		:= xmap createChildReference("InversionEditPart", "ModelEditPart", "Set Relationships", "icons/setRelationship16.gif");
	--Group for all InversionSetRelationshipLMLVisualizers
	var inversionLMLVisualizerChildReference 
		:= xmap createChildReference("LMLVisualizer5EditPart", "InversionEditPart", "LMLVisualizers", "icons/LMLVisualizer16.gif");
	
	this.genNavigator.childReferences += 
		OrderedSet{LMLModelChildReference, --rootEnitiyChildReference, rootChildReference, rootMethodChildReference,
					 ontologyChildReference, ontLMLVisualizerChildReference, modelChildReference, modelLMLVisualizerChildReference,
					entityChildReference, entityLMLVisualizerChildReference, entityAttributeChildReference, 
					entityMethodChildReference, connectionChildReference, connectionLMLVisualizerChildReference, 
					connectionAttributeChildReference, --connectionFieldMethodChildReference
					generalizationChildReference, generalizationLMLVisualizerChildReference,
					complementChildReference, complementLMLVisualizerChildReference, 
					equalChildReference, equalLMLVisualizerChildReference,
					inversionChildReference, inversionLMLVisualizerChildReference};
	
	--fix BUG 331875
	gmfgenModel.objectsOfType(ExpressionLabelParser)->forEach(parser)
	{
		parser.className := parser.className.concat(parser._uses->first().container().oclAsType(GenCommonBase).visualID.toString());
	};
}

mapping createChildReference(childEditPartName:String, parentEditPartName:String, groupName:String, icon:String): GenNavigatorChildReference
{
	result.child := gmfgenModel.objectsOfType(GenNode)->asOrderedSet()->select(n | n.editPartClassName = childEditPartName)->first();
	result.parent := gmfgenModel.objectsOfType(GenNode)->asOrderedSet()->select(n | n.editPartClassName = parentEditPartName)->first();
	result.hideIfEmpty := false;
	result.groupName := groupName;
	result.groupIcon := icon;
}